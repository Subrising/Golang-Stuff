// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v5"
)

// Page is an object representing the database table.
type Page struct {
	DocumentID null.String `boil:"document_id" json:"document_id,omitempty" toml:"document_id" yaml:"document_id,omitempty"`
	PageID     string      `boil:"page_id" json:"page_id" toml:"page_id" yaml:"page_id"`
	Status     string      `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *pageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// pageR is where relationships are stored.
type pageR struct {
	Document         *Document
	TextAnnotations  TextAnnotationSlice
	LabelAnnotations LabelAnnotationSlice
	CropHints        CropHintSlice
	Logs             LogSlice
}

// pageL is where Load methods for each relationship are stored.
type pageL struct{}

var (
	pageColumns               = []string{"document_id", "page_id", "status"}
	pageColumnsWithoutDefault = []string{"document_id", "status"}
	pageColumnsWithDefault    = []string{"page_id"}
	pagePrimaryKeyColumns     = []string{"page_id"}
)

type (
	// PageSlice is an alias for a slice of pointers to Page.
	// This should generally be used opposed to []Page.
	PageSlice []*Page
	// PageHook is the signature for custom Page hook methods
	PageHook func(boil.Executor, *Page) error

	pageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pageType                 = reflect.TypeOf(&Page{})
	pageMapping              = queries.MakeStructMapping(pageType)
	pagePrimaryKeyMapping, _ = queries.BindMapping(pageType, pageMapping, pagePrimaryKeyColumns)
	pageInsertCacheMut       sync.RWMutex
	pageInsertCache          = make(map[string]insertCache)
	pageUpdateCacheMut       sync.RWMutex
	pageUpdateCache          = make(map[string]updateCache)
	pageUpsertCacheMut       sync.RWMutex
	pageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var pageBeforeInsertHooks []PageHook
var pageBeforeUpdateHooks []PageHook
var pageBeforeDeleteHooks []PageHook
var pageBeforeUpsertHooks []PageHook

var pageAfterInsertHooks []PageHook
var pageAfterSelectHooks []PageHook
var pageAfterUpdateHooks []PageHook
var pageAfterDeleteHooks []PageHook
var pageAfterUpsertHooks []PageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Page) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pageBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Page) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pageBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Page) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pageBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Page) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pageBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Page) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pageAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Page) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range pageAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Page) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pageAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Page) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pageAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Page) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pageAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPageHook registers your hook function for all future operations.
func AddPageHook(hookPoint boil.HookPoint, pageHook PageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pageBeforeInsertHooks = append(pageBeforeInsertHooks, pageHook)
	case boil.BeforeUpdateHook:
		pageBeforeUpdateHooks = append(pageBeforeUpdateHooks, pageHook)
	case boil.BeforeDeleteHook:
		pageBeforeDeleteHooks = append(pageBeforeDeleteHooks, pageHook)
	case boil.BeforeUpsertHook:
		pageBeforeUpsertHooks = append(pageBeforeUpsertHooks, pageHook)
	case boil.AfterInsertHook:
		pageAfterInsertHooks = append(pageAfterInsertHooks, pageHook)
	case boil.AfterSelectHook:
		pageAfterSelectHooks = append(pageAfterSelectHooks, pageHook)
	case boil.AfterUpdateHook:
		pageAfterUpdateHooks = append(pageAfterUpdateHooks, pageHook)
	case boil.AfterDeleteHook:
		pageAfterDeleteHooks = append(pageAfterDeleteHooks, pageHook)
	case boil.AfterUpsertHook:
		pageAfterUpsertHooks = append(pageAfterUpsertHooks, pageHook)
	}
}

// OneP returns a single page record from the query, and panics on error.
func (q pageQuery) OneP() *Page {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single page record from the query.
func (q pageQuery) One() (*Page, error) {
	o := &Page{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for page")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Page records from the query, and panics on error.
func (q pageQuery) AllP() PageSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Page records from the query.
func (q pageQuery) All() (PageSlice, error) {
	var o PageSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Page slice")
	}

	if len(pageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Page records in the query, and panics on error.
func (q pageQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Page records in the query.
func (q pageQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count page rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q pageQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q pageQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if page exists")
	}

	return count > 0, nil
}

// DocumentG pointed to by the foreign key.
func (o *Page) DocumentG(mods ...qm.QueryMod) documentQuery {
	return o.Document(boil.GetDB(), mods...)
}

// Document pointed to by the foreign key.
func (o *Page) Document(exec boil.Executor, mods ...qm.QueryMod) documentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("document_id=?", o.DocumentID),
	}

	queryMods = append(queryMods, mods...)

	query := Documents(exec, queryMods...)
	queries.SetFrom(query.Query, "\"document\"")

	return query
}

// TextAnnotationsG retrieves all the text_annotation's text annotation.
func (o *Page) TextAnnotationsG(mods ...qm.QueryMod) textAnnotationQuery {
	return o.TextAnnotations(boil.GetDB(), mods...)
}

// TextAnnotations retrieves all the text_annotation's text annotation with an executor.
func (o *Page) TextAnnotations(exec boil.Executor, mods ...qm.QueryMod) textAnnotationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"page_id\"=?", o.PageID),
	)

	query := TextAnnotations(exec, queryMods...)
	queries.SetFrom(query.Query, "\"text_annotation\" as \"a\"")
	return query
}

// LabelAnnotationsG retrieves all the label_annotation's label annotation.
func (o *Page) LabelAnnotationsG(mods ...qm.QueryMod) labelAnnotationQuery {
	return o.LabelAnnotations(boil.GetDB(), mods...)
}

// LabelAnnotations retrieves all the label_annotation's label annotation with an executor.
func (o *Page) LabelAnnotations(exec boil.Executor, mods ...qm.QueryMod) labelAnnotationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"page_id\"=?", o.PageID),
	)

	query := LabelAnnotations(exec, queryMods...)
	queries.SetFrom(query.Query, "\"label_annotation\" as \"a\"")
	return query
}

// CropHintsG retrieves all the crop_hint's crop hint.
func (o *Page) CropHintsG(mods ...qm.QueryMod) cropHintQuery {
	return o.CropHints(boil.GetDB(), mods...)
}

// CropHints retrieves all the crop_hint's crop hint with an executor.
func (o *Page) CropHints(exec boil.Executor, mods ...qm.QueryMod) cropHintQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"page_id\"=?", o.PageID),
	)

	query := CropHints(exec, queryMods...)
	queries.SetFrom(query.Query, "\"crop_hint\" as \"a\"")
	return query
}

// LogsG retrieves all the log's logs.
func (o *Page) LogsG(mods ...qm.QueryMod) logQuery {
	return o.Logs(boil.GetDB(), mods...)
}

// Logs retrieves all the log's logs with an executor.
func (o *Page) Logs(exec boil.Executor, mods ...qm.QueryMod) logQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"page_id\"=?", o.PageID),
	)

	query := Logs(exec, queryMods...)
	queries.SetFrom(query.Query, "\"logs\" as \"a\"")
	return query
}

// LoadDocument allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (pageL) LoadDocument(e boil.Executor, singular bool, maybePage interface{}) error {
	var slice []*Page
	var object *Page

	count := 1
	if singular {
		object = maybePage.(*Page)
	} else {
		slice = *maybePage.(*PageSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &pageR{}
		}
		args[0] = object.DocumentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &pageR{}
			}
			args[i] = obj.DocumentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"document\" where \"document_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Document")
	}
	defer results.Close()

	var resultSlice []*Document
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Document")
	}

	if len(pageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Document = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DocumentID.String == foreign.DocumentID {
				local.R.Document = foreign
				break
			}
		}
	}

	return nil
}

// LoadTextAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (pageL) LoadTextAnnotations(e boil.Executor, singular bool, maybePage interface{}) error {
	var slice []*Page
	var object *Page

	count := 1
	if singular {
		object = maybePage.(*Page)
	} else {
		slice = *maybePage.(*PageSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &pageR{}
		}
		args[0] = object.PageID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &pageR{}
			}
			args[i] = obj.PageID
		}
	}

	query := fmt.Sprintf(
		"select * from \"text_annotation\" where \"page_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load text_annotation")
	}
	defer results.Close()

	var resultSlice []*TextAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice text_annotation")
	}

	if len(textAnnotationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TextAnnotations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PageID == foreign.PageID.String {
				local.R.TextAnnotations = append(local.R.TextAnnotations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLabelAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (pageL) LoadLabelAnnotations(e boil.Executor, singular bool, maybePage interface{}) error {
	var slice []*Page
	var object *Page

	count := 1
	if singular {
		object = maybePage.(*Page)
	} else {
		slice = *maybePage.(*PageSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &pageR{}
		}
		args[0] = object.PageID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &pageR{}
			}
			args[i] = obj.PageID
		}
	}

	query := fmt.Sprintf(
		"select * from \"label_annotation\" where \"page_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load label_annotation")
	}
	defer results.Close()

	var resultSlice []*LabelAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice label_annotation")
	}

	if len(labelAnnotationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LabelAnnotations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PageID == foreign.PageID.String {
				local.R.LabelAnnotations = append(local.R.LabelAnnotations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCropHints allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (pageL) LoadCropHints(e boil.Executor, singular bool, maybePage interface{}) error {
	var slice []*Page
	var object *Page

	count := 1
	if singular {
		object = maybePage.(*Page)
	} else {
		slice = *maybePage.(*PageSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &pageR{}
		}
		args[0] = object.PageID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &pageR{}
			}
			args[i] = obj.PageID
		}
	}

	query := fmt.Sprintf(
		"select * from \"crop_hint\" where \"page_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load crop_hint")
	}
	defer results.Close()

	var resultSlice []*CropHint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice crop_hint")
	}

	if len(cropHintAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CropHints = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PageID == foreign.PageID.String {
				local.R.CropHints = append(local.R.CropHints, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLogs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (pageL) LoadLogs(e boil.Executor, singular bool, maybePage interface{}) error {
	var slice []*Page
	var object *Page

	count := 1
	if singular {
		object = maybePage.(*Page)
	} else {
		slice = *maybePage.(*PageSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &pageR{}
		}
		args[0] = object.PageID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &pageR{}
			}
			args[i] = obj.PageID
		}
	}

	query := fmt.Sprintf(
		"select * from \"logs\" where \"page_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load logs")
	}
	defer results.Close()

	var resultSlice []*Log
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice logs")
	}

	if len(logAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Logs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PageID == foreign.PageID.String {
				local.R.Logs = append(local.R.Logs, foreign)
				break
			}
		}
	}

	return nil
}

// SetDocumentG of the page to the related item.
// Sets o.R.Document to related.
// Adds o to related.R.Pages.
// Uses the global database handle.
func (o *Page) SetDocumentG(insert bool, related *Document) error {
	return o.SetDocument(boil.GetDB(), insert, related)
}

// SetDocumentP of the page to the related item.
// Sets o.R.Document to related.
// Adds o to related.R.Pages.
// Panics on error.
func (o *Page) SetDocumentP(exec boil.Executor, insert bool, related *Document) {
	if err := o.SetDocument(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDocumentGP of the page to the related item.
// Sets o.R.Document to related.
// Adds o to related.R.Pages.
// Uses the global database handle and panics on error.
func (o *Page) SetDocumentGP(insert bool, related *Document) {
	if err := o.SetDocument(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDocument of the page to the related item.
// Sets o.R.Document to related.
// Adds o to related.R.Pages.
func (o *Page) SetDocument(exec boil.Executor, insert bool, related *Document) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"page\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"document_id"}),
		strmangle.WhereClause("\"", "\"", 2, pagePrimaryKeyColumns),
	)
	values := []interface{}{related.DocumentID, o.PageID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DocumentID.String = related.DocumentID
	o.DocumentID.Valid = true

	if o.R == nil {
		o.R = &pageR{
			Document: related,
		}
	} else {
		o.R.Document = related
	}

	if related.R == nil {
		related.R = &documentR{
			Pages: PageSlice{o},
		}
	} else {
		related.R.Pages = append(related.R.Pages, o)
	}

	return nil
}

// RemoveDocumentG relationship.
// Sets o.R.Document to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Page) RemoveDocumentG(related *Document) error {
	return o.RemoveDocument(boil.GetDB(), related)
}

// RemoveDocumentP relationship.
// Sets o.R.Document to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Page) RemoveDocumentP(exec boil.Executor, related *Document) {
	if err := o.RemoveDocument(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveDocumentGP relationship.
// Sets o.R.Document to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Page) RemoveDocumentGP(related *Document) {
	if err := o.RemoveDocument(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveDocument relationship.
// Sets o.R.Document to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Page) RemoveDocument(exec boil.Executor, related *Document) error {
	var err error

	o.DocumentID.Valid = false
	if err = o.Update(exec, "document_id"); err != nil {
		o.DocumentID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Document = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Pages {
		if o.DocumentID.String != ri.DocumentID.String {
			continue
		}

		ln := len(related.R.Pages)
		if ln > 1 && i < ln-1 {
			related.R.Pages[i] = related.R.Pages[ln-1]
		}
		related.R.Pages = related.R.Pages[:ln-1]
		break
	}
	return nil
}

// AddTextAnnotationsG adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.TextAnnotations.
// Sets related.R.Page appropriately.
// Uses the global database handle.
func (o *Page) AddTextAnnotationsG(insert bool, related ...*TextAnnotation) error {
	return o.AddTextAnnotations(boil.GetDB(), insert, related...)
}

// AddTextAnnotationsP adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.TextAnnotations.
// Sets related.R.Page appropriately.
// Panics on error.
func (o *Page) AddTextAnnotationsP(exec boil.Executor, insert bool, related ...*TextAnnotation) {
	if err := o.AddTextAnnotations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTextAnnotationsGP adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.TextAnnotations.
// Sets related.R.Page appropriately.
// Uses the global database handle and panics on error.
func (o *Page) AddTextAnnotationsGP(insert bool, related ...*TextAnnotation) {
	if err := o.AddTextAnnotations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTextAnnotations adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.TextAnnotations.
// Sets related.R.Page appropriately.
func (o *Page) AddTextAnnotations(exec boil.Executor, insert bool, related ...*TextAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PageID.String = o.PageID
			rel.PageID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"text_annotation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
				strmangle.WhereClause("\"", "\"", 2, textAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.PageID, rel.TextID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PageID.String = o.PageID
			rel.PageID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &pageR{
			TextAnnotations: related,
		}
	} else {
		o.R.TextAnnotations = append(o.R.TextAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &textAnnotationR{
				Page: o,
			}
		} else {
			rel.R.Page = o
		}
	}
	return nil
}

// SetTextAnnotationsG removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's TextAnnotations accordingly.
// Replaces o.R.TextAnnotations with related.
// Sets related.R.Page's TextAnnotations accordingly.
// Uses the global database handle.
func (o *Page) SetTextAnnotationsG(insert bool, related ...*TextAnnotation) error {
	return o.SetTextAnnotations(boil.GetDB(), insert, related...)
}

// SetTextAnnotationsP removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's TextAnnotations accordingly.
// Replaces o.R.TextAnnotations with related.
// Sets related.R.Page's TextAnnotations accordingly.
// Panics on error.
func (o *Page) SetTextAnnotationsP(exec boil.Executor, insert bool, related ...*TextAnnotation) {
	if err := o.SetTextAnnotations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTextAnnotationsGP removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's TextAnnotations accordingly.
// Replaces o.R.TextAnnotations with related.
// Sets related.R.Page's TextAnnotations accordingly.
// Uses the global database handle and panics on error.
func (o *Page) SetTextAnnotationsGP(insert bool, related ...*TextAnnotation) {
	if err := o.SetTextAnnotations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTextAnnotations removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's TextAnnotations accordingly.
// Replaces o.R.TextAnnotations with related.
// Sets related.R.Page's TextAnnotations accordingly.
func (o *Page) SetTextAnnotations(exec boil.Executor, insert bool, related ...*TextAnnotation) error {
	query := "update \"text_annotation\" set \"page_id\" = null where \"page_id\" = $1"
	values := []interface{}{o.PageID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TextAnnotations {
			rel.PageID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Page = nil
		}

		o.R.TextAnnotations = nil
	}
	return o.AddTextAnnotations(exec, insert, related...)
}

// RemoveTextAnnotationsG relationships from objects passed in.
// Removes related items from R.TextAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Uses the global database handle.
func (o *Page) RemoveTextAnnotationsG(related ...*TextAnnotation) error {
	return o.RemoveTextAnnotations(boil.GetDB(), related...)
}

// RemoveTextAnnotationsP relationships from objects passed in.
// Removes related items from R.TextAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Panics on error.
func (o *Page) RemoveTextAnnotationsP(exec boil.Executor, related ...*TextAnnotation) {
	if err := o.RemoveTextAnnotations(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTextAnnotationsGP relationships from objects passed in.
// Removes related items from R.TextAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Uses the global database handle and panics on error.
func (o *Page) RemoveTextAnnotationsGP(related ...*TextAnnotation) {
	if err := o.RemoveTextAnnotations(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTextAnnotations relationships from objects passed in.
// Removes related items from R.TextAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
func (o *Page) RemoveTextAnnotations(exec boil.Executor, related ...*TextAnnotation) error {
	var err error
	for _, rel := range related {
		rel.PageID.Valid = false
		if rel.R != nil {
			rel.R.Page = nil
		}
		if err = rel.Update(exec, "page_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TextAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.TextAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.TextAnnotations[i] = o.R.TextAnnotations[ln-1]
			}
			o.R.TextAnnotations = o.R.TextAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddLabelAnnotationsG adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.LabelAnnotations.
// Sets related.R.Page appropriately.
// Uses the global database handle.
func (o *Page) AddLabelAnnotationsG(insert bool, related ...*LabelAnnotation) error {
	return o.AddLabelAnnotations(boil.GetDB(), insert, related...)
}

// AddLabelAnnotationsP adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.LabelAnnotations.
// Sets related.R.Page appropriately.
// Panics on error.
func (o *Page) AddLabelAnnotationsP(exec boil.Executor, insert bool, related ...*LabelAnnotation) {
	if err := o.AddLabelAnnotations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddLabelAnnotationsGP adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.LabelAnnotations.
// Sets related.R.Page appropriately.
// Uses the global database handle and panics on error.
func (o *Page) AddLabelAnnotationsGP(insert bool, related ...*LabelAnnotation) {
	if err := o.AddLabelAnnotations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddLabelAnnotations adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.LabelAnnotations.
// Sets related.R.Page appropriately.
func (o *Page) AddLabelAnnotations(exec boil.Executor, insert bool, related ...*LabelAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PageID.String = o.PageID
			rel.PageID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"label_annotation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
				strmangle.WhereClause("\"", "\"", 2, labelAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.PageID, rel.LabelID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PageID.String = o.PageID
			rel.PageID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &pageR{
			LabelAnnotations: related,
		}
	} else {
		o.R.LabelAnnotations = append(o.R.LabelAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &labelAnnotationR{
				Page: o,
			}
		} else {
			rel.R.Page = o
		}
	}
	return nil
}

// SetLabelAnnotationsG removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's LabelAnnotations accordingly.
// Replaces o.R.LabelAnnotations with related.
// Sets related.R.Page's LabelAnnotations accordingly.
// Uses the global database handle.
func (o *Page) SetLabelAnnotationsG(insert bool, related ...*LabelAnnotation) error {
	return o.SetLabelAnnotations(boil.GetDB(), insert, related...)
}

// SetLabelAnnotationsP removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's LabelAnnotations accordingly.
// Replaces o.R.LabelAnnotations with related.
// Sets related.R.Page's LabelAnnotations accordingly.
// Panics on error.
func (o *Page) SetLabelAnnotationsP(exec boil.Executor, insert bool, related ...*LabelAnnotation) {
	if err := o.SetLabelAnnotations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLabelAnnotationsGP removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's LabelAnnotations accordingly.
// Replaces o.R.LabelAnnotations with related.
// Sets related.R.Page's LabelAnnotations accordingly.
// Uses the global database handle and panics on error.
func (o *Page) SetLabelAnnotationsGP(insert bool, related ...*LabelAnnotation) {
	if err := o.SetLabelAnnotations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLabelAnnotations removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's LabelAnnotations accordingly.
// Replaces o.R.LabelAnnotations with related.
// Sets related.R.Page's LabelAnnotations accordingly.
func (o *Page) SetLabelAnnotations(exec boil.Executor, insert bool, related ...*LabelAnnotation) error {
	query := "update \"label_annotation\" set \"page_id\" = null where \"page_id\" = $1"
	values := []interface{}{o.PageID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LabelAnnotations {
			rel.PageID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Page = nil
		}

		o.R.LabelAnnotations = nil
	}
	return o.AddLabelAnnotations(exec, insert, related...)
}

// RemoveLabelAnnotationsG relationships from objects passed in.
// Removes related items from R.LabelAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Uses the global database handle.
func (o *Page) RemoveLabelAnnotationsG(related ...*LabelAnnotation) error {
	return o.RemoveLabelAnnotations(boil.GetDB(), related...)
}

// RemoveLabelAnnotationsP relationships from objects passed in.
// Removes related items from R.LabelAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Panics on error.
func (o *Page) RemoveLabelAnnotationsP(exec boil.Executor, related ...*LabelAnnotation) {
	if err := o.RemoveLabelAnnotations(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveLabelAnnotationsGP relationships from objects passed in.
// Removes related items from R.LabelAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Uses the global database handle and panics on error.
func (o *Page) RemoveLabelAnnotationsGP(related ...*LabelAnnotation) {
	if err := o.RemoveLabelAnnotations(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveLabelAnnotations relationships from objects passed in.
// Removes related items from R.LabelAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
func (o *Page) RemoveLabelAnnotations(exec boil.Executor, related ...*LabelAnnotation) error {
	var err error
	for _, rel := range related {
		rel.PageID.Valid = false
		if rel.R != nil {
			rel.R.Page = nil
		}
		if err = rel.Update(exec, "page_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LabelAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.LabelAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.LabelAnnotations[i] = o.R.LabelAnnotations[ln-1]
			}
			o.R.LabelAnnotations = o.R.LabelAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddCropHintsG adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.CropHints.
// Sets related.R.Page appropriately.
// Uses the global database handle.
func (o *Page) AddCropHintsG(insert bool, related ...*CropHint) error {
	return o.AddCropHints(boil.GetDB(), insert, related...)
}

// AddCropHintsP adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.CropHints.
// Sets related.R.Page appropriately.
// Panics on error.
func (o *Page) AddCropHintsP(exec boil.Executor, insert bool, related ...*CropHint) {
	if err := o.AddCropHints(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCropHintsGP adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.CropHints.
// Sets related.R.Page appropriately.
// Uses the global database handle and panics on error.
func (o *Page) AddCropHintsGP(insert bool, related ...*CropHint) {
	if err := o.AddCropHints(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCropHints adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.CropHints.
// Sets related.R.Page appropriately.
func (o *Page) AddCropHints(exec boil.Executor, insert bool, related ...*CropHint) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PageID.String = o.PageID
			rel.PageID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"crop_hint\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
				strmangle.WhereClause("\"", "\"", 2, cropHintPrimaryKeyColumns),
			)
			values := []interface{}{o.PageID, rel.CropID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PageID.String = o.PageID
			rel.PageID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &pageR{
			CropHints: related,
		}
	} else {
		o.R.CropHints = append(o.R.CropHints, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cropHintR{
				Page: o,
			}
		} else {
			rel.R.Page = o
		}
	}
	return nil
}

// SetCropHintsG removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's CropHints accordingly.
// Replaces o.R.CropHints with related.
// Sets related.R.Page's CropHints accordingly.
// Uses the global database handle.
func (o *Page) SetCropHintsG(insert bool, related ...*CropHint) error {
	return o.SetCropHints(boil.GetDB(), insert, related...)
}

// SetCropHintsP removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's CropHints accordingly.
// Replaces o.R.CropHints with related.
// Sets related.R.Page's CropHints accordingly.
// Panics on error.
func (o *Page) SetCropHintsP(exec boil.Executor, insert bool, related ...*CropHint) {
	if err := o.SetCropHints(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCropHintsGP removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's CropHints accordingly.
// Replaces o.R.CropHints with related.
// Sets related.R.Page's CropHints accordingly.
// Uses the global database handle and panics on error.
func (o *Page) SetCropHintsGP(insert bool, related ...*CropHint) {
	if err := o.SetCropHints(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCropHints removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's CropHints accordingly.
// Replaces o.R.CropHints with related.
// Sets related.R.Page's CropHints accordingly.
func (o *Page) SetCropHints(exec boil.Executor, insert bool, related ...*CropHint) error {
	query := "update \"crop_hint\" set \"page_id\" = null where \"page_id\" = $1"
	values := []interface{}{o.PageID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CropHints {
			rel.PageID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Page = nil
		}

		o.R.CropHints = nil
	}
	return o.AddCropHints(exec, insert, related...)
}

// RemoveCropHintsG relationships from objects passed in.
// Removes related items from R.CropHints (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Uses the global database handle.
func (o *Page) RemoveCropHintsG(related ...*CropHint) error {
	return o.RemoveCropHints(boil.GetDB(), related...)
}

// RemoveCropHintsP relationships from objects passed in.
// Removes related items from R.CropHints (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Panics on error.
func (o *Page) RemoveCropHintsP(exec boil.Executor, related ...*CropHint) {
	if err := o.RemoveCropHints(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCropHintsGP relationships from objects passed in.
// Removes related items from R.CropHints (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Uses the global database handle and panics on error.
func (o *Page) RemoveCropHintsGP(related ...*CropHint) {
	if err := o.RemoveCropHints(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCropHints relationships from objects passed in.
// Removes related items from R.CropHints (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
func (o *Page) RemoveCropHints(exec boil.Executor, related ...*CropHint) error {
	var err error
	for _, rel := range related {
		rel.PageID.Valid = false
		if rel.R != nil {
			rel.R.Page = nil
		}
		if err = rel.Update(exec, "page_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CropHints {
			if rel != ri {
				continue
			}

			ln := len(o.R.CropHints)
			if ln > 1 && i < ln-1 {
				o.R.CropHints[i] = o.R.CropHints[ln-1]
			}
			o.R.CropHints = o.R.CropHints[:ln-1]
			break
		}
	}

	return nil
}

// AddLogsG adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.Logs.
// Sets related.R.Page appropriately.
// Uses the global database handle.
func (o *Page) AddLogsG(insert bool, related ...*Log) error {
	return o.AddLogs(boil.GetDB(), insert, related...)
}

// AddLogsP adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.Logs.
// Sets related.R.Page appropriately.
// Panics on error.
func (o *Page) AddLogsP(exec boil.Executor, insert bool, related ...*Log) {
	if err := o.AddLogs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddLogsGP adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.Logs.
// Sets related.R.Page appropriately.
// Uses the global database handle and panics on error.
func (o *Page) AddLogsGP(insert bool, related ...*Log) {
	if err := o.AddLogs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddLogs adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.Logs.
// Sets related.R.Page appropriately.
func (o *Page) AddLogs(exec boil.Executor, insert bool, related ...*Log) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PageID.String = o.PageID
			rel.PageID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"logs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
				strmangle.WhereClause("\"", "\"", 2, logPrimaryKeyColumns),
			)
			values := []interface{}{o.PageID, rel.LogID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PageID.String = o.PageID
			rel.PageID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &pageR{
			Logs: related,
		}
	} else {
		o.R.Logs = append(o.R.Logs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &logR{
				Page: o,
			}
		} else {
			rel.R.Page = o
		}
	}
	return nil
}

// SetLogsG removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's Logs accordingly.
// Replaces o.R.Logs with related.
// Sets related.R.Page's Logs accordingly.
// Uses the global database handle.
func (o *Page) SetLogsG(insert bool, related ...*Log) error {
	return o.SetLogs(boil.GetDB(), insert, related...)
}

// SetLogsP removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's Logs accordingly.
// Replaces o.R.Logs with related.
// Sets related.R.Page's Logs accordingly.
// Panics on error.
func (o *Page) SetLogsP(exec boil.Executor, insert bool, related ...*Log) {
	if err := o.SetLogs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLogsGP removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's Logs accordingly.
// Replaces o.R.Logs with related.
// Sets related.R.Page's Logs accordingly.
// Uses the global database handle and panics on error.
func (o *Page) SetLogsGP(insert bool, related ...*Log) {
	if err := o.SetLogs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLogs removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's Logs accordingly.
// Replaces o.R.Logs with related.
// Sets related.R.Page's Logs accordingly.
func (o *Page) SetLogs(exec boil.Executor, insert bool, related ...*Log) error {
	query := "update \"logs\" set \"page_id\" = null where \"page_id\" = $1"
	values := []interface{}{o.PageID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Logs {
			rel.PageID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Page = nil
		}

		o.R.Logs = nil
	}
	return o.AddLogs(exec, insert, related...)
}

// RemoveLogsG relationships from objects passed in.
// Removes related items from R.Logs (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Uses the global database handle.
func (o *Page) RemoveLogsG(related ...*Log) error {
	return o.RemoveLogs(boil.GetDB(), related...)
}

// RemoveLogsP relationships from objects passed in.
// Removes related items from R.Logs (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Panics on error.
func (o *Page) RemoveLogsP(exec boil.Executor, related ...*Log) {
	if err := o.RemoveLogs(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveLogsGP relationships from objects passed in.
// Removes related items from R.Logs (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
// Uses the global database handle and panics on error.
func (o *Page) RemoveLogsGP(related ...*Log) {
	if err := o.RemoveLogs(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveLogs relationships from objects passed in.
// Removes related items from R.Logs (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
func (o *Page) RemoveLogs(exec boil.Executor, related ...*Log) error {
	var err error
	for _, rel := range related {
		rel.PageID.Valid = false
		if rel.R != nil {
			rel.R.Page = nil
		}
		if err = rel.Update(exec, "page_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Logs {
			if rel != ri {
				continue
			}

			ln := len(o.R.Logs)
			if ln > 1 && i < ln-1 {
				o.R.Logs[i] = o.R.Logs[ln-1]
			}
			o.R.Logs = o.R.Logs[:ln-1]
			break
		}
	}

	return nil
}

// PagesG retrieves all records.
func PagesG(mods ...qm.QueryMod) pageQuery {
	return Pages(boil.GetDB(), mods...)
}

// Pages retrieves all the records using an executor.
func Pages(exec boil.Executor, mods ...qm.QueryMod) pageQuery {
	mods = append(mods, qm.From("\"page\""))
	return pageQuery{NewQuery(exec, mods...)}
}

// FindPageG retrieves a single record by ID.
func FindPageG(pageID string, selectCols ...string) (*Page, error) {
	return FindPage(boil.GetDB(), pageID, selectCols...)
}

// FindPageGP retrieves a single record by ID, and panics on error.
func FindPageGP(pageID string, selectCols ...string) *Page {
	retobj, err := FindPage(boil.GetDB(), pageID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPage(exec boil.Executor, pageID string, selectCols ...string) (*Page, error) {
	pageObj := &Page{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"page\" where \"page_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, pageID)

	err := q.Bind(pageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from page")
	}

	return pageObj, nil
}

// FindPageP retrieves a single record by ID with an executor, and panics on error.
func FindPageP(exec boil.Executor, pageID string, selectCols ...string) *Page {
	retobj, err := FindPage(exec, pageID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Page) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Page) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Page) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Page) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no page provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	pageInsertCacheMut.RLock()
	cache, cached := pageInsertCache[key]
	pageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			pageColumns,
			pageColumnsWithDefault,
			pageColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(pageType, pageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pageType, pageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"page\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"page\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into page")
	}

	if !cached {
		pageInsertCacheMut.Lock()
		pageInsertCache[key] = cache
		pageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Page record. See Update for
// whitelist behavior description.
func (o *Page) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Page record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Page) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Page, and panics on error.
// See Update for whitelist behavior description.
func (o *Page) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Page.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Page) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	pageUpdateCacheMut.RLock()
	cache, cached := pageUpdateCache[key]
	pageUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(pageColumns, pagePrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update page, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"page\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pageType, pageMapping, append(wl, pagePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update page row")
	}

	if !cached {
		pageUpdateCacheMut.Lock()
		pageUpdateCache[key] = cache
		pageUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q pageQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q pageQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for page")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PageSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PageSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PageSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PageSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE \"page\" SET %s WHERE (\"page_id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(pagePrimaryKeyColumns), len(colNames)+1, len(pagePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in page slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Page) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Page) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Page) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Page) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no page provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pageUpsertCacheMut.RLock()
	cache, cached := pageUpsertCache[key]
	pageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			pageColumns,
			pageColumnsWithDefault,
			pageColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			pageColumns,
			pagePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert page, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pagePrimaryKeyColumns))
			copy(conflict, pagePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"page\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(pageType, pageMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pageType, pageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert page")
	}

	if !cached {
		pageUpsertCacheMut.Lock()
		pageUpsertCache[key] = cache
		pageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Page record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Page) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Page record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Page) DeleteG() error {
	if o == nil {
		return errors.New("models: no Page provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Page record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Page) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Page record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Page) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Page provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pagePrimaryKeyMapping)
	sql := "DELETE FROM \"page\" WHERE \"page_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from page")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q pageQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q pageQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no pageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from page")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PageSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PageSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Page slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PageSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PageSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Page slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(pageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM \"page\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, pagePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(pagePrimaryKeyColumns), 1, len(pagePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from page slice")
	}

	if len(pageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Page) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Page) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Page) ReloadG() error {
	if o == nil {
		return errors.New("models: no Page provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Page) Reload(exec boil.Executor) error {
	ret, err := FindPage(exec, o.PageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PageSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PageSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PageSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	pages := PageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT \"page\".* FROM \"page\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, pagePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(pagePrimaryKeyColumns), 1, len(pagePrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&pages)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PageSlice")
	}

	*o = pages

	return nil
}

// PageExists checks if the Page row exists.
func PageExists(exec boil.Executor, pageID string) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from \"page\" where \"page_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pageID)
	}

	row := exec.QueryRow(sql, pageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if page exists")
	}

	return exists, nil
}

// PageExistsG checks if the Page row exists.
func PageExistsG(pageID string) (bool, error) {
	return PageExists(boil.GetDB(), pageID)
}

// PageExistsGP checks if the Page row exists. Panics on error.
func PageExistsGP(pageID string) bool {
	e, err := PageExists(boil.GetDB(), pageID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PageExistsP checks if the Page row exists. Panics on error.
func PageExistsP(exec boil.Executor, pageID string) bool {
	e, err := PageExists(exec, pageID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
