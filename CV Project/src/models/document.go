// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v5"
)

// Document is an object representing the database table.
type Document struct {
	DocumentID string      `boil:"document_id" json:"document_id" toml:"document_id" yaml:"document_id"`
	OwnerID    null.String `boil:"owner_id" json:"owner_id,omitempty" toml:"owner_id" yaml:"owner_id,omitempty"`
	DocType    string      `boil:"doc_type" json:"doc_type" toml:"doc_type" yaml:"doc_type"`
	Status     string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	DocHash    string      `boil:"doc_hash" json:"doc_hash" toml:"doc_hash" yaml:"doc_hash"`

	R *documentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L documentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// documentR is where relationships are stored.
type documentR struct {
	Owner *Owner
	Pages PageSlice
}

// documentL is where Load methods for each relationship are stored.
type documentL struct{}

var (
	documentColumns               = []string{"document_id", "owner_id", "doc_type", "status", "doc_hash"}
	documentColumnsWithoutDefault = []string{"owner_id", "doc_type", "status", "doc_hash"}
	documentColumnsWithDefault    = []string{"document_id"}
	documentPrimaryKeyColumns     = []string{"document_id"}
)

type (
	// DocumentSlice is an alias for a slice of pointers to Document.
	// This should generally be used opposed to []Document.
	DocumentSlice []*Document
	// DocumentHook is the signature for custom Document hook methods
	DocumentHook func(boil.Executor, *Document) error

	documentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	documentType                 = reflect.TypeOf(&Document{})
	documentMapping              = queries.MakeStructMapping(documentType)
	documentPrimaryKeyMapping, _ = queries.BindMapping(documentType, documentMapping, documentPrimaryKeyColumns)
	documentInsertCacheMut       sync.RWMutex
	documentInsertCache          = make(map[string]insertCache)
	documentUpdateCacheMut       sync.RWMutex
	documentUpdateCache          = make(map[string]updateCache)
	documentUpsertCacheMut       sync.RWMutex
	documentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var documentBeforeInsertHooks []DocumentHook
var documentBeforeUpdateHooks []DocumentHook
var documentBeforeDeleteHooks []DocumentHook
var documentBeforeUpsertHooks []DocumentHook

var documentAfterInsertHooks []DocumentHook
var documentAfterSelectHooks []DocumentHook
var documentAfterUpdateHooks []DocumentHook
var documentAfterDeleteHooks []DocumentHook
var documentAfterUpsertHooks []DocumentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Document) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Document) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range documentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Document) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range documentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Document) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Document) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Document) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range documentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Document) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range documentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Document) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range documentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Document) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range documentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDocumentHook registers your hook function for all future operations.
func AddDocumentHook(hookPoint boil.HookPoint, documentHook DocumentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		documentBeforeInsertHooks = append(documentBeforeInsertHooks, documentHook)
	case boil.BeforeUpdateHook:
		documentBeforeUpdateHooks = append(documentBeforeUpdateHooks, documentHook)
	case boil.BeforeDeleteHook:
		documentBeforeDeleteHooks = append(documentBeforeDeleteHooks, documentHook)
	case boil.BeforeUpsertHook:
		documentBeforeUpsertHooks = append(documentBeforeUpsertHooks, documentHook)
	case boil.AfterInsertHook:
		documentAfterInsertHooks = append(documentAfterInsertHooks, documentHook)
	case boil.AfterSelectHook:
		documentAfterSelectHooks = append(documentAfterSelectHooks, documentHook)
	case boil.AfterUpdateHook:
		documentAfterUpdateHooks = append(documentAfterUpdateHooks, documentHook)
	case boil.AfterDeleteHook:
		documentAfterDeleteHooks = append(documentAfterDeleteHooks, documentHook)
	case boil.AfterUpsertHook:
		documentAfterUpsertHooks = append(documentAfterUpsertHooks, documentHook)
	}
}

// OneP returns a single document record from the query, and panics on error.
func (q documentQuery) OneP() *Document {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single document record from the query.
func (q documentQuery) One() (*Document, error) {
	o := &Document{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for document")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Document records from the query, and panics on error.
func (q documentQuery) AllP() DocumentSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Document records from the query.
func (q documentQuery) All() (DocumentSlice, error) {
	var o DocumentSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Document slice")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Document records in the query, and panics on error.
func (q documentQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Document records in the query.
func (q documentQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count document rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q documentQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q documentQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if document exists")
	}

	return count > 0, nil
}

// OwnerG pointed to by the foreign key.
func (o *Document) OwnerG(mods ...qm.QueryMod) ownerQuery {
	return o.Owner(boil.GetDB(), mods...)
}

// Owner pointed to by the foreign key.
func (o *Document) Owner(exec boil.Executor, mods ...qm.QueryMod) ownerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("owner_id=?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	query := Owners(exec, queryMods...)
	queries.SetFrom(query.Query, "\"owner\"")

	return query
}

// PagesG retrieves all the page's page.
func (o *Document) PagesG(mods ...qm.QueryMod) pageQuery {
	return o.Pages(boil.GetDB(), mods...)
}

// Pages retrieves all the page's page with an executor.
func (o *Document) Pages(exec boil.Executor, mods ...qm.QueryMod) pageQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"document_id\"=?", o.DocumentID),
	)

	query := Pages(exec, queryMods...)
	queries.SetFrom(query.Query, "\"page\" as \"a\"")
	return query
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (documentL) LoadOwner(e boil.Executor, singular bool, maybeDocument interface{}) error {
	var slice []*Document
	var object *Document

	count := 1
	if singular {
		object = maybeDocument.(*Document)
	} else {
		slice = *maybeDocument.(*DocumentSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &documentR{}
		}
		args[0] = object.OwnerID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &documentR{}
			}
			args[i] = obj.OwnerID
		}
	}

	query := fmt.Sprintf(
		"select * from \"owner\" where \"owner_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Owner")
	}
	defer results.Close()

	var resultSlice []*Owner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Owner")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Owner = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID.String == foreign.OwnerID {
				local.R.Owner = foreign
				break
			}
		}
	}

	return nil
}

// LoadPages allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (documentL) LoadPages(e boil.Executor, singular bool, maybeDocument interface{}) error {
	var slice []*Document
	var object *Document

	count := 1
	if singular {
		object = maybeDocument.(*Document)
	} else {
		slice = *maybeDocument.(*DocumentSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &documentR{}
		}
		args[0] = object.DocumentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &documentR{}
			}
			args[i] = obj.DocumentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"page\" where \"document_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load page")
	}
	defer results.Close()

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice page")
	}

	if len(pageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Pages = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DocumentID == foreign.DocumentID.String {
				local.R.Pages = append(local.R.Pages, foreign)
				break
			}
		}
	}

	return nil
}

// SetOwnerG of the document to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.Documents.
// Uses the global database handle.
func (o *Document) SetOwnerG(insert bool, related *Owner) error {
	return o.SetOwner(boil.GetDB(), insert, related)
}

// SetOwnerP of the document to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.Documents.
// Panics on error.
func (o *Document) SetOwnerP(exec boil.Executor, insert bool, related *Owner) {
	if err := o.SetOwner(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOwnerGP of the document to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.Documents.
// Uses the global database handle and panics on error.
func (o *Document) SetOwnerGP(insert bool, related *Owner) {
	if err := o.SetOwner(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOwner of the document to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.Documents.
func (o *Document) SetOwner(exec boil.Executor, insert bool, related *Owner) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"document\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, documentPrimaryKeyColumns),
	)
	values := []interface{}{related.OwnerID, o.DocumentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID.String = related.OwnerID
	o.OwnerID.Valid = true

	if o.R == nil {
		o.R = &documentR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &ownerR{
			Documents: DocumentSlice{o},
		}
	} else {
		related.R.Documents = append(related.R.Documents, o)
	}

	return nil
}

// RemoveOwnerG relationship.
// Sets o.R.Owner to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Document) RemoveOwnerG(related *Owner) error {
	return o.RemoveOwner(boil.GetDB(), related)
}

// RemoveOwnerP relationship.
// Sets o.R.Owner to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Document) RemoveOwnerP(exec boil.Executor, related *Owner) {
	if err := o.RemoveOwner(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOwnerGP relationship.
// Sets o.R.Owner to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Document) RemoveOwnerGP(related *Owner) {
	if err := o.RemoveOwner(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOwner relationship.
// Sets o.R.Owner to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Document) RemoveOwner(exec boil.Executor, related *Owner) error {
	var err error

	o.OwnerID.Valid = false
	if err = o.Update(exec, "owner_id"); err != nil {
		o.OwnerID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Owner = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Documents {
		if o.OwnerID.String != ri.OwnerID.String {
			continue
		}

		ln := len(related.R.Documents)
		if ln > 1 && i < ln-1 {
			related.R.Documents[i] = related.R.Documents[ln-1]
		}
		related.R.Documents = related.R.Documents[:ln-1]
		break
	}
	return nil
}

// AddPagesG adds the given related objects to the existing relationships
// of the document, optionally inserting them as new records.
// Appends related to o.R.Pages.
// Sets related.R.Document appropriately.
// Uses the global database handle.
func (o *Document) AddPagesG(insert bool, related ...*Page) error {
	return o.AddPages(boil.GetDB(), insert, related...)
}

// AddPagesP adds the given related objects to the existing relationships
// of the document, optionally inserting them as new records.
// Appends related to o.R.Pages.
// Sets related.R.Document appropriately.
// Panics on error.
func (o *Document) AddPagesP(exec boil.Executor, insert bool, related ...*Page) {
	if err := o.AddPages(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPagesGP adds the given related objects to the existing relationships
// of the document, optionally inserting them as new records.
// Appends related to o.R.Pages.
// Sets related.R.Document appropriately.
// Uses the global database handle and panics on error.
func (o *Document) AddPagesGP(insert bool, related ...*Page) {
	if err := o.AddPages(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPages adds the given related objects to the existing relationships
// of the document, optionally inserting them as new records.
// Appends related to o.R.Pages.
// Sets related.R.Document appropriately.
func (o *Document) AddPages(exec boil.Executor, insert bool, related ...*Page) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DocumentID.String = o.DocumentID
			rel.DocumentID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"page\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"document_id"}),
				strmangle.WhereClause("\"", "\"", 2, pagePrimaryKeyColumns),
			)
			values := []interface{}{o.DocumentID, rel.PageID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DocumentID.String = o.DocumentID
			rel.DocumentID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &documentR{
			Pages: related,
		}
	} else {
		o.R.Pages = append(o.R.Pages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pageR{
				Document: o,
			}
		} else {
			rel.R.Document = o
		}
	}
	return nil
}

// SetPagesG removes all previously related items of the
// document replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Document's Pages accordingly.
// Replaces o.R.Pages with related.
// Sets related.R.Document's Pages accordingly.
// Uses the global database handle.
func (o *Document) SetPagesG(insert bool, related ...*Page) error {
	return o.SetPages(boil.GetDB(), insert, related...)
}

// SetPagesP removes all previously related items of the
// document replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Document's Pages accordingly.
// Replaces o.R.Pages with related.
// Sets related.R.Document's Pages accordingly.
// Panics on error.
func (o *Document) SetPagesP(exec boil.Executor, insert bool, related ...*Page) {
	if err := o.SetPages(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPagesGP removes all previously related items of the
// document replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Document's Pages accordingly.
// Replaces o.R.Pages with related.
// Sets related.R.Document's Pages accordingly.
// Uses the global database handle and panics on error.
func (o *Document) SetPagesGP(insert bool, related ...*Page) {
	if err := o.SetPages(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPages removes all previously related items of the
// document replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Document's Pages accordingly.
// Replaces o.R.Pages with related.
// Sets related.R.Document's Pages accordingly.
func (o *Document) SetPages(exec boil.Executor, insert bool, related ...*Page) error {
	query := "update \"page\" set \"document_id\" = null where \"document_id\" = $1"
	values := []interface{}{o.DocumentID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Pages {
			rel.DocumentID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Document = nil
		}

		o.R.Pages = nil
	}
	return o.AddPages(exec, insert, related...)
}

// RemovePagesG relationships from objects passed in.
// Removes related items from R.Pages (uses pointer comparison, removal does not keep order)
// Sets related.R.Document.
// Uses the global database handle.
func (o *Document) RemovePagesG(related ...*Page) error {
	return o.RemovePages(boil.GetDB(), related...)
}

// RemovePagesP relationships from objects passed in.
// Removes related items from R.Pages (uses pointer comparison, removal does not keep order)
// Sets related.R.Document.
// Panics on error.
func (o *Document) RemovePagesP(exec boil.Executor, related ...*Page) {
	if err := o.RemovePages(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePagesGP relationships from objects passed in.
// Removes related items from R.Pages (uses pointer comparison, removal does not keep order)
// Sets related.R.Document.
// Uses the global database handle and panics on error.
func (o *Document) RemovePagesGP(related ...*Page) {
	if err := o.RemovePages(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePages relationships from objects passed in.
// Removes related items from R.Pages (uses pointer comparison, removal does not keep order)
// Sets related.R.Document.
func (o *Document) RemovePages(exec boil.Executor, related ...*Page) error {
	var err error
	for _, rel := range related {
		rel.DocumentID.Valid = false
		if rel.R != nil {
			rel.R.Document = nil
		}
		if err = rel.Update(exec, "document_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Pages {
			if rel != ri {
				continue
			}

			ln := len(o.R.Pages)
			if ln > 1 && i < ln-1 {
				o.R.Pages[i] = o.R.Pages[ln-1]
			}
			o.R.Pages = o.R.Pages[:ln-1]
			break
		}
	}

	return nil
}

// DocumentsG retrieves all records.
func DocumentsG(mods ...qm.QueryMod) documentQuery {
	return Documents(boil.GetDB(), mods...)
}

// Documents retrieves all the records using an executor.
func Documents(exec boil.Executor, mods ...qm.QueryMod) documentQuery {
	mods = append(mods, qm.From("\"document\""))
	return documentQuery{NewQuery(exec, mods...)}
}

// FindDocumentG retrieves a single record by ID.
func FindDocumentG(documentID string, selectCols ...string) (*Document, error) {
	return FindDocument(boil.GetDB(), documentID, selectCols...)
}

// FindDocumentGP retrieves a single record by ID, and panics on error.
func FindDocumentGP(documentID string, selectCols ...string) *Document {
	retobj, err := FindDocument(boil.GetDB(), documentID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindDocument retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDocument(exec boil.Executor, documentID string, selectCols ...string) (*Document, error) {
	documentObj := &Document{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"document\" where \"document_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, documentID)

	err := q.Bind(documentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from document")
	}

	return documentObj, nil
}

// FindDocumentP retrieves a single record by ID with an executor, and panics on error.
func FindDocumentP(exec boil.Executor, documentID string, selectCols ...string) *Document {
	retobj, err := FindDocument(exec, documentID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Document) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Document) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Document) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Document) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no document provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(documentColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	documentInsertCacheMut.RLock()
	cache, cached := documentInsertCache[key]
	documentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			documentColumns,
			documentColumnsWithDefault,
			documentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(documentType, documentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(documentType, documentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"document\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"document\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into document")
	}

	if !cached {
		documentInsertCacheMut.Lock()
		documentInsertCache[key] = cache
		documentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Document record. See Update for
// whitelist behavior description.
func (o *Document) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Document record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Document) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Document, and panics on error.
// See Update for whitelist behavior description.
func (o *Document) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Document.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Document) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	documentUpdateCacheMut.RLock()
	cache, cached := documentUpdateCache[key]
	documentUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(documentColumns, documentPrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update document, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"document\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, documentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(documentType, documentMapping, append(wl, documentPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update document row")
	}

	if !cached {
		documentUpdateCacheMut.Lock()
		documentUpdateCache[key] = cache
		documentUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q documentQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q documentQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for document")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DocumentSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o DocumentSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o DocumentSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DocumentSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE \"document\" SET %s WHERE (\"document_id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(documentPrimaryKeyColumns), len(colNames)+1, len(documentPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in document slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Document) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Document) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Document) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Document) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no document provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(documentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	documentUpsertCacheMut.RLock()
	cache, cached := documentUpsertCache[key]
	documentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			documentColumns,
			documentColumnsWithDefault,
			documentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			documentColumns,
			documentPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert document, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(documentPrimaryKeyColumns))
			copy(conflict, documentPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"document\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(documentType, documentMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(documentType, documentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert document")
	}

	if !cached {
		documentUpsertCacheMut.Lock()
		documentUpsertCache[key] = cache
		documentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Document record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Document) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Document record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Document) DeleteG() error {
	if o == nil {
		return errors.New("models: no Document provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Document record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Document) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Document record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Document) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Document provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), documentPrimaryKeyMapping)
	sql := "DELETE FROM \"document\" WHERE \"document_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from document")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q documentQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q documentQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no documentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from document")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o DocumentSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o DocumentSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Document slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o DocumentSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DocumentSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Document slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(documentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM \"document\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, documentPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(documentPrimaryKeyColumns), 1, len(documentPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from document slice")
	}

	if len(documentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Document) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Document) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Document) ReloadG() error {
	if o == nil {
		return errors.New("models: no Document provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Document) Reload(exec boil.Executor) error {
	ret, err := FindDocument(exec, o.DocumentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DocumentSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *DocumentSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DocumentSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty DocumentSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DocumentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	documents := DocumentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT \"document\".* FROM \"document\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, documentPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(documentPrimaryKeyColumns), 1, len(documentPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&documents)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DocumentSlice")
	}

	*o = documents

	return nil
}

// DocumentExists checks if the Document row exists.
func DocumentExists(exec boil.Executor, documentID string) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from \"document\" where \"document_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, documentID)
	}

	row := exec.QueryRow(sql, documentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if document exists")
	}

	return exists, nil
}

// DocumentExistsG checks if the Document row exists.
func DocumentExistsG(documentID string) (bool, error) {
	return DocumentExists(boil.GetDB(), documentID)
}

// DocumentExistsGP checks if the Document row exists. Panics on error.
func DocumentExistsGP(documentID string) bool {
	e, err := DocumentExists(boil.GetDB(), documentID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// DocumentExistsP checks if the Document row exists. Panics on error.
func DocumentExistsP(exec boil.Executor, documentID string) bool {
	e, err := DocumentExists(exec, documentID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
