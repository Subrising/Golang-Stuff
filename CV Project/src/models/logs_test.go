// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testLogs(t *testing.T) {
	t.Parallel()

	query := Logs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = log.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Logs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Logs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Logs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := LogSlice{log}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Logs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := LogExists(tx, log.LogID)
	if err != nil {
		t.Errorf("Unable to check if Log exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LogExistsG to return true, but got false.")
	}
}
func testLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	logFound, err := FindLog(tx, log.LogID)
	if err != nil {
		t.Error(err)
	}

	if logFound == nil {
		t.Error("want a record, got nil")
	}
}
func testLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Logs(tx).Bind(log); err != nil {
		t.Error(err)
	}
}

func testLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Logs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	logOne := &Log{}
	logTwo := &Log{}
	if err = randomize.Struct(seed, logOne, logDBTypes, false, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}
	if err = randomize.Struct(seed, logTwo, logDBTypes, false, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = logOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = logTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Logs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	logOne := &Log{}
	logTwo := &Log{}
	if err = randomize.Struct(seed, logOne, logDBTypes, false, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}
	if err = randomize.Struct(seed, logTwo, logDBTypes, false, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = logOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = logTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Logs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func logBeforeInsertHook(e boil.Executor, o *Log) error {
	*o = Log{}
	return nil
}

func logAfterInsertHook(e boil.Executor, o *Log) error {
	*o = Log{}
	return nil
}

func logAfterSelectHook(e boil.Executor, o *Log) error {
	*o = Log{}
	return nil
}

func logBeforeUpdateHook(e boil.Executor, o *Log) error {
	*o = Log{}
	return nil
}

func logAfterUpdateHook(e boil.Executor, o *Log) error {
	*o = Log{}
	return nil
}

func logBeforeDeleteHook(e boil.Executor, o *Log) error {
	*o = Log{}
	return nil
}

func logAfterDeleteHook(e boil.Executor, o *Log) error {
	*o = Log{}
	return nil
}

func logBeforeUpsertHook(e boil.Executor, o *Log) error {
	*o = Log{}
	return nil
}

func logAfterUpsertHook(e boil.Executor, o *Log) error {
	*o = Log{}
	return nil
}

func testLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Log{}
	o := &Log{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, logDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Log object: %s", err)
	}

	AddLogHook(boil.BeforeInsertHook, logBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	logBeforeInsertHooks = []LogHook{}

	AddLogHook(boil.AfterInsertHook, logAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	logAfterInsertHooks = []LogHook{}

	AddLogHook(boil.AfterSelectHook, logAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	logAfterSelectHooks = []LogHook{}

	AddLogHook(boil.BeforeUpdateHook, logBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	logBeforeUpdateHooks = []LogHook{}

	AddLogHook(boil.AfterUpdateHook, logAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	logAfterUpdateHooks = []LogHook{}

	AddLogHook(boil.BeforeDeleteHook, logBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	logBeforeDeleteHooks = []LogHook{}

	AddLogHook(boil.AfterDeleteHook, logAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	logAfterDeleteHooks = []LogHook{}

	AddLogHook(boil.BeforeUpsertHook, logBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	logBeforeUpsertHooks = []LogHook{}

	AddLogHook(boil.AfterUpsertHook, logAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	logAfterUpsertHooks = []LogHook{}
}
func testLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Logs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx, logColumns...); err != nil {
		t.Error(err)
	}

	count, err := Logs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLogToOnePageUsingPage(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Log
	var foreign Page

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	local.PageID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.PageID.String = foreign.PageID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Page(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.PageID != foreign.PageID {
		t.Errorf("want: %v, got %v", foreign.PageID, check.PageID)
	}

	slice := LogSlice{&local}
	if err = local.L.LoadPage(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Page = nil
	if err = local.L.LoadPage(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLogToOneSetOpPageUsingPage(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Log
	var b, c Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, logDBTypes, false, strmangle.SetComplement(logPrimaryKeyColumns, logColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Page{&b, &c} {
		err = a.SetPage(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Page != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Logs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageID.String != x.PageID {
			t.Error("foreign key was wrong value", a.PageID.String)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageID.String))
		reflect.Indirect(reflect.ValueOf(&a.PageID.String)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PageID.String != x.PageID {
			t.Error("foreign key was wrong value", a.PageID.String, x.PageID)
		}
	}
}

func testLogToOneRemoveOpPageUsingPage(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Log
	var b Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, logDBTypes, false, strmangle.SetComplement(logPrimaryKeyColumns, logColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPage(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePage(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Page(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Page != nil {
		t.Error("R struct entry should be nil")
	}

	if a.PageID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Logs) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = log.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := LogSlice{log}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Logs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	logDBTypes = map[string]string{`LogID`: `uuid`, `PageID`: `uuid`, `Time`: `timestamp without time zone`, `Type`: `character`}
	_          = bytes.MinRead
)

func testLogsUpdate(t *testing.T) {
	t.Parallel()

	if len(logColumns) == len(logPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Logs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, log, logDBTypes, true, logColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	if err = log.Update(tx); err != nil {
		t.Error(err)
	}
}

func testLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(logColumns) == len(logPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	log := &Log{}
	if err = randomize.Struct(seed, log, logDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Logs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, log, logDBTypes, true, logPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(logColumns, logPrimaryKeyColumns) {
		fields = logColumns
	} else {
		fields = strmangle.SetComplement(
			logColumns,
			logPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(log))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := LogSlice{log}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(logColumns) == len(logPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	log := Log{}
	if err = randomize.Struct(seed, &log, logDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = log.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Log: %s", err)
	}

	count, err := Logs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &log, logDBTypes, false, logPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Log struct: %s", err)
	}

	if err = log.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Log: %s", err)
	}

	count, err = Logs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
