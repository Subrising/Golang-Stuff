// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testPages(t *testing.T) {
	t.Parallel()

	query := Pages(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = page.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Pages(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PageSlice{page}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PageExists(tx, page.PageID)
	if err != nil {
		t.Errorf("Unable to check if Page exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PageExistsG to return true, but got false.")
	}
}
func testPagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	pageFound, err := FindPage(tx, page.PageID)
	if err != nil {
		t.Error(err)
	}

	if pageFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Pages(tx).Bind(page); err != nil {
		t.Error(err)
	}
}

func testPagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Pages(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pageOne := &Page{}
	pageTwo := &Page{}
	if err = randomize.Struct(seed, pageOne, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err = randomize.Struct(seed, pageTwo, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pageOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = pageTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Pages(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pageOne := &Page{}
	pageTwo := &Page{}
	if err = randomize.Struct(seed, pageOne, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err = randomize.Struct(seed, pageTwo, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = pageOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = pageTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func pageBeforeInsertHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterInsertHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterSelectHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeUpdateHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterUpdateHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeDeleteHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterDeleteHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeUpsertHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterUpsertHook(e boil.Executor, o *Page) error {
	*o = Page{}
	return nil
}

func testPagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Page{}
	o := &Page{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Page object: %s", err)
	}

	AddPageHook(boil.BeforeInsertHook, pageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pageBeforeInsertHooks = []PageHook{}

	AddPageHook(boil.AfterInsertHook, pageAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pageAfterInsertHooks = []PageHook{}

	AddPageHook(boil.AfterSelectHook, pageAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pageAfterSelectHooks = []PageHook{}

	AddPageHook(boil.BeforeUpdateHook, pageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pageBeforeUpdateHooks = []PageHook{}

	AddPageHook(boil.AfterUpdateHook, pageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pageAfterUpdateHooks = []PageHook{}

	AddPageHook(boil.BeforeDeleteHook, pageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pageBeforeDeleteHooks = []PageHook{}

	AddPageHook(boil.AfterDeleteHook, pageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pageAfterDeleteHooks = []PageHook{}

	AddPageHook(boil.BeforeUpsertHook, pageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pageBeforeUpsertHooks = []PageHook{}

	AddPageHook(boil.AfterUpsertHook, pageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pageAfterUpsertHooks = []PageHook{}
}
func testPagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx, pageColumns...); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPageToManyTextAnnotations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c TextAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, textAnnotationDBTypes, false, textAnnotationColumnsWithDefault...)
	randomize.Struct(seed, &c, textAnnotationDBTypes, false, textAnnotationColumnsWithDefault...)

	b.PageID.Valid = true
	c.PageID.Valid = true
	b.PageID.String = a.PageID
	c.PageID.String = a.PageID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	textAnnotation, err := a.TextAnnotations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range textAnnotation {
		if v.PageID.String == b.PageID.String {
			bFound = true
		}
		if v.PageID.String == c.PageID.String {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageSlice{&a}
	if err = a.L.LoadTextAnnotations(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TextAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TextAnnotations = nil
	if err = a.L.LoadTextAnnotations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TextAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", textAnnotation)
	}
}

func testPageToManyLabelAnnotations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c LabelAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, labelAnnotationDBTypes, false, labelAnnotationColumnsWithDefault...)
	randomize.Struct(seed, &c, labelAnnotationDBTypes, false, labelAnnotationColumnsWithDefault...)

	b.PageID.Valid = true
	c.PageID.Valid = true
	b.PageID.String = a.PageID
	c.PageID.String = a.PageID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	labelAnnotation, err := a.LabelAnnotations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range labelAnnotation {
		if v.PageID.String == b.PageID.String {
			bFound = true
		}
		if v.PageID.String == c.PageID.String {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageSlice{&a}
	if err = a.L.LoadLabelAnnotations(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LabelAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LabelAnnotations = nil
	if err = a.L.LoadLabelAnnotations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LabelAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", labelAnnotation)
	}
}

func testPageToManyCropHints(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c CropHint

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, cropHintDBTypes, false, cropHintColumnsWithDefault...)
	randomize.Struct(seed, &c, cropHintDBTypes, false, cropHintColumnsWithDefault...)

	b.PageID.Valid = true
	c.PageID.Valid = true
	b.PageID.String = a.PageID
	c.PageID.String = a.PageID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	cropHint, err := a.CropHints(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range cropHint {
		if v.PageID.String == b.PageID.String {
			bFound = true
		}
		if v.PageID.String == c.PageID.String {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageSlice{&a}
	if err = a.L.LoadCropHints(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CropHints); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CropHints = nil
	if err = a.L.LoadCropHints(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CropHints); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", cropHint)
	}
}

func testPageToManyLogs(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c Log

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, logDBTypes, false, logColumnsWithDefault...)
	randomize.Struct(seed, &c, logDBTypes, false, logColumnsWithDefault...)

	b.PageID.Valid = true
	c.PageID.Valid = true
	b.PageID.String = a.PageID
	c.PageID.String = a.PageID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	log, err := a.Logs(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range log {
		if v.PageID.String == b.PageID.String {
			bFound = true
		}
		if v.PageID.String == c.PageID.String {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageSlice{&a}
	if err = a.L.LoadLogs(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Logs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Logs = nil
	if err = a.L.LoadLogs(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Logs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", log)
	}
}

func testPageToManyAddOpTextAnnotations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e TextAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TextAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, textAnnotationDBTypes, false, strmangle.SetComplement(textAnnotationPrimaryKeyColumns, textAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TextAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTextAnnotations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PageID != first.PageID.String {
			t.Error("foreign key was wrong value", a.PageID, first.PageID.String)
		}
		if a.PageID != second.PageID.String {
			t.Error("foreign key was wrong value", a.PageID, second.PageID.String)
		}

		if first.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TextAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TextAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TextAnnotations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPageToManySetOpTextAnnotations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e TextAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TextAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, textAnnotationDBTypes, false, strmangle.SetComplement(textAnnotationPrimaryKeyColumns, textAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetTextAnnotations(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TextAnnotations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTextAnnotations(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TextAnnotations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.PageID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.PageID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.PageID != d.PageID.String {
		t.Error("foreign key was wrong value", a.PageID, d.PageID.String)
	}
	if a.PageID != e.PageID.String {
		t.Error("foreign key was wrong value", a.PageID, e.PageID.String)
	}

	if b.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Page != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Page != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TextAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TextAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPageToManyRemoveOpTextAnnotations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e TextAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TextAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, textAnnotationDBTypes, false, strmangle.SetComplement(textAnnotationPrimaryKeyColumns, textAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddTextAnnotations(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TextAnnotations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTextAnnotations(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TextAnnotations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.PageID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.PageID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Page != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Page != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TextAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TextAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TextAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPageToManyAddOpLabelAnnotations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e LabelAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*LabelAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, labelAnnotationDBTypes, false, strmangle.SetComplement(labelAnnotationPrimaryKeyColumns, labelAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*LabelAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLabelAnnotations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PageID != first.PageID.String {
			t.Error("foreign key was wrong value", a.PageID, first.PageID.String)
		}
		if a.PageID != second.PageID.String {
			t.Error("foreign key was wrong value", a.PageID, second.PageID.String)
		}

		if first.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LabelAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LabelAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LabelAnnotations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPageToManySetOpLabelAnnotations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e LabelAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*LabelAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, labelAnnotationDBTypes, false, strmangle.SetComplement(labelAnnotationPrimaryKeyColumns, labelAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetLabelAnnotations(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LabelAnnotations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetLabelAnnotations(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LabelAnnotations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.PageID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.PageID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.PageID != d.PageID.String {
		t.Error("foreign key was wrong value", a.PageID, d.PageID.String)
	}
	if a.PageID != e.PageID.String {
		t.Error("foreign key was wrong value", a.PageID, e.PageID.String)
	}

	if b.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Page != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Page != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.LabelAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.LabelAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPageToManyRemoveOpLabelAnnotations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e LabelAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*LabelAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, labelAnnotationDBTypes, false, strmangle.SetComplement(labelAnnotationPrimaryKeyColumns, labelAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddLabelAnnotations(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.LabelAnnotations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveLabelAnnotations(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.LabelAnnotations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.PageID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.PageID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Page != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Page != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.LabelAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.LabelAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.LabelAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPageToManyAddOpCropHints(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e CropHint

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CropHint{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cropHintDBTypes, false, strmangle.SetComplement(cropHintPrimaryKeyColumns, cropHintColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CropHint{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCropHints(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PageID != first.PageID.String {
			t.Error("foreign key was wrong value", a.PageID, first.PageID.String)
		}
		if a.PageID != second.PageID.String {
			t.Error("foreign key was wrong value", a.PageID, second.PageID.String)
		}

		if first.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CropHints[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CropHints[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CropHints(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPageToManySetOpCropHints(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e CropHint

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CropHint{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cropHintDBTypes, false, strmangle.SetComplement(cropHintPrimaryKeyColumns, cropHintColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetCropHints(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CropHints(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCropHints(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CropHints(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.PageID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.PageID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.PageID != d.PageID.String {
		t.Error("foreign key was wrong value", a.PageID, d.PageID.String)
	}
	if a.PageID != e.PageID.String {
		t.Error("foreign key was wrong value", a.PageID, e.PageID.String)
	}

	if b.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Page != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Page != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CropHints[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CropHints[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPageToManyRemoveOpCropHints(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e CropHint

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CropHint{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cropHintDBTypes, false, strmangle.SetComplement(cropHintPrimaryKeyColumns, cropHintColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddCropHints(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CropHints(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCropHints(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CropHints(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.PageID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.PageID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Page != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Page != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CropHints) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CropHints[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CropHints[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPageToManyAddOpLogs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e Log

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Log{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, logDBTypes, false, strmangle.SetComplement(logPrimaryKeyColumns, logColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Log{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLogs(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PageID != first.PageID.String {
			t.Error("foreign key was wrong value", a.PageID, first.PageID.String)
		}
		if a.PageID != second.PageID.String {
			t.Error("foreign key was wrong value", a.PageID, second.PageID.String)
		}

		if first.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Logs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Logs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Logs(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPageToManySetOpLogs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e Log

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Log{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, logDBTypes, false, strmangle.SetComplement(logPrimaryKeyColumns, logColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetLogs(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Logs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetLogs(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Logs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.PageID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.PageID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.PageID != d.PageID.String {
		t.Error("foreign key was wrong value", a.PageID, d.PageID.String)
	}
	if a.PageID != e.PageID.String {
		t.Error("foreign key was wrong value", a.PageID, e.PageID.String)
	}

	if b.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Page != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Page != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Logs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Logs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPageToManyRemoveOpLogs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c, d, e Log

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Log{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, logDBTypes, false, strmangle.SetComplement(logPrimaryKeyColumns, logColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddLogs(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Logs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveLogs(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Logs(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.PageID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.PageID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Page != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Page != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Page != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Logs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Logs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Logs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPageToOneDocumentUsingDocument(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Page
	var foreign Document

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	local.DocumentID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.DocumentID.String = foreign.DocumentID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Document(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.DocumentID != foreign.DocumentID {
		t.Errorf("want: %v, got %v", foreign.DocumentID, check.DocumentID)
	}

	slice := PageSlice{&local}
	if err = local.L.LoadDocument(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Document == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Document = nil
	if err = local.L.LoadDocument(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Document == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPageToOneSetOpDocumentUsingDocument(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b, c Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Document{&b, &c} {
		err = a.SetDocument(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Document != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Pages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DocumentID.String != x.DocumentID {
			t.Error("foreign key was wrong value", a.DocumentID.String)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DocumentID.String))
		reflect.Indirect(reflect.ValueOf(&a.DocumentID.String)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DocumentID.String != x.DocumentID {
			t.Error("foreign key was wrong value", a.DocumentID.String, x.DocumentID)
		}
	}
}

func testPageToOneRemoveOpDocumentUsingDocument(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Page
	var b Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDocument(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDocument(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Document(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Document != nil {
		t.Error("R struct entry should be nil")
	}

	if a.DocumentID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Pages) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = page.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PageSlice{page}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Pages(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pageDBTypes = map[string]string{`DocumentID`: `uuid`, `PageID`: `uuid`, `Status`: `character`}
	_           = bytes.MinRead
)

func testPagesUpdate(t *testing.T) {
	t.Parallel()

	if len(pageColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, page, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err = page.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pageColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	page := &Page{}
	if err = randomize.Struct(seed, page, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, page, pageDBTypes, true, pagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pageColumns, pagePrimaryKeyColumns) {
		fields = pageColumns
	} else {
		fields = strmangle.SetComplement(
			pageColumns,
			pagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(page))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PageSlice{page}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPagesUpsert(t *testing.T) {
	t.Parallel()

	if len(pageColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	page := Page{}
	if err = randomize.Struct(seed, &page, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = page.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Page: %s", err)
	}

	count, err := Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &page, pageDBTypes, false, pagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err = page.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Page: %s", err)
	}

	count, err = Pages(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
