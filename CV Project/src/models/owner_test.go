// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testOwners(t *testing.T) {
	t.Parallel()

	query := Owners(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testOwnersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = owner.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Owners(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOwnersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Owners(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Owners(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOwnersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OwnerSlice{owner}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Owners(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testOwnersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := OwnerExists(tx, owner.OwnerID)
	if err != nil {
		t.Errorf("Unable to check if Owner exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OwnerExistsG to return true, but got false.")
	}
}
func testOwnersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	ownerFound, err := FindOwner(tx, owner.OwnerID)
	if err != nil {
		t.Error(err)
	}

	if ownerFound == nil {
		t.Error("want a record, got nil")
	}
}
func testOwnersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Owners(tx).Bind(owner); err != nil {
		t.Error(err)
	}
}

func testOwnersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Owners(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOwnersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ownerOne := &Owner{}
	ownerTwo := &Owner{}
	if err = randomize.Struct(seed, ownerOne, ownerDBTypes, false, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}
	if err = randomize.Struct(seed, ownerTwo, ownerDBTypes, false, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ownerOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = ownerTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Owners(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOwnersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ownerOne := &Owner{}
	ownerTwo := &Owner{}
	if err = randomize.Struct(seed, ownerOne, ownerDBTypes, false, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}
	if err = randomize.Struct(seed, ownerTwo, ownerDBTypes, false, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ownerOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = ownerTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Owners(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func ownerBeforeInsertHook(e boil.Executor, o *Owner) error {
	*o = Owner{}
	return nil
}

func ownerAfterInsertHook(e boil.Executor, o *Owner) error {
	*o = Owner{}
	return nil
}

func ownerAfterSelectHook(e boil.Executor, o *Owner) error {
	*o = Owner{}
	return nil
}

func ownerBeforeUpdateHook(e boil.Executor, o *Owner) error {
	*o = Owner{}
	return nil
}

func ownerAfterUpdateHook(e boil.Executor, o *Owner) error {
	*o = Owner{}
	return nil
}

func ownerBeforeDeleteHook(e boil.Executor, o *Owner) error {
	*o = Owner{}
	return nil
}

func ownerAfterDeleteHook(e boil.Executor, o *Owner) error {
	*o = Owner{}
	return nil
}

func ownerBeforeUpsertHook(e boil.Executor, o *Owner) error {
	*o = Owner{}
	return nil
}

func ownerAfterUpsertHook(e boil.Executor, o *Owner) error {
	*o = Owner{}
	return nil
}

func testOwnersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Owner{}
	o := &Owner{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ownerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Owner object: %s", err)
	}

	AddOwnerHook(boil.BeforeInsertHook, ownerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ownerBeforeInsertHooks = []OwnerHook{}

	AddOwnerHook(boil.AfterInsertHook, ownerAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ownerAfterInsertHooks = []OwnerHook{}

	AddOwnerHook(boil.AfterSelectHook, ownerAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ownerAfterSelectHooks = []OwnerHook{}

	AddOwnerHook(boil.BeforeUpdateHook, ownerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ownerBeforeUpdateHooks = []OwnerHook{}

	AddOwnerHook(boil.AfterUpdateHook, ownerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ownerAfterUpdateHooks = []OwnerHook{}

	AddOwnerHook(boil.BeforeDeleteHook, ownerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ownerBeforeDeleteHooks = []OwnerHook{}

	AddOwnerHook(boil.AfterDeleteHook, ownerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ownerAfterDeleteHooks = []OwnerHook{}

	AddOwnerHook(boil.BeforeUpsertHook, ownerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ownerBeforeUpsertHooks = []OwnerHook{}

	AddOwnerHook(boil.AfterUpsertHook, ownerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ownerAfterUpsertHooks = []OwnerHook{}
}
func testOwnersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Owners(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOwnersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx, ownerColumns...); err != nil {
		t.Error(err)
	}

	count, err := Owners(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOwnerToManyDocuments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Owner
	var b, c Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ownerDBTypes, true, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, documentDBTypes, false, documentColumnsWithDefault...)
	randomize.Struct(seed, &c, documentDBTypes, false, documentColumnsWithDefault...)

	b.OwnerID.Valid = true
	c.OwnerID.Valid = true
	b.OwnerID.String = a.OwnerID
	c.OwnerID.String = a.OwnerID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	document, err := a.Documents(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range document {
		if v.OwnerID.String == b.OwnerID.String {
			bFound = true
		}
		if v.OwnerID.String == c.OwnerID.String {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OwnerSlice{&a}
	if err = a.L.LoadDocuments(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Documents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Documents = nil
	if err = a.L.LoadDocuments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Documents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", document)
	}
}

func testOwnerToManyAddOpDocuments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Owner
	var b, c, d, e Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ownerDBTypes, false, strmangle.SetComplement(ownerPrimaryKeyColumns, ownerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Document{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Document{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDocuments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.OwnerID != first.OwnerID.String {
			t.Error("foreign key was wrong value", a.OwnerID, first.OwnerID.String)
		}
		if a.OwnerID != second.OwnerID.String {
			t.Error("foreign key was wrong value", a.OwnerID, second.OwnerID.String)
		}

		if first.R.Owner != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Owner != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Documents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Documents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Documents(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOwnerToManySetOpDocuments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Owner
	var b, c, d, e Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ownerDBTypes, false, strmangle.SetComplement(ownerPrimaryKeyColumns, ownerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Document{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetDocuments(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Documents(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDocuments(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Documents(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.OwnerID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.OwnerID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.OwnerID != d.OwnerID.String {
		t.Error("foreign key was wrong value", a.OwnerID, d.OwnerID.String)
	}
	if a.OwnerID != e.OwnerID.String {
		t.Error("foreign key was wrong value", a.OwnerID, e.OwnerID.String)
	}

	if b.R.Owner != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Owner != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Owner != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Owner != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Documents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Documents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOwnerToManyRemoveOpDocuments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Owner
	var b, c, d, e Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ownerDBTypes, false, strmangle.SetComplement(ownerPrimaryKeyColumns, ownerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Document{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddDocuments(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Documents(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDocuments(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Documents(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.OwnerID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.OwnerID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Owner != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Owner != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Owner != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Owner != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Documents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Documents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Documents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOwnersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = owner.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOwnersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OwnerSlice{owner}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testOwnersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Owners(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ownerDBTypes = map[string]string{`OwnerID`: `uuid`, `OwnerName`: `character`}
	_            = bytes.MinRead
)

func testOwnersUpdate(t *testing.T) {
	t.Parallel()

	if len(ownerColumns) == len(ownerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Owners(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, owner, ownerDBTypes, true, ownerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	if err = owner.Update(tx); err != nil {
		t.Error(err)
	}
}

func testOwnersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ownerColumns) == len(ownerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	owner := &Owner{}
	if err = randomize.Struct(seed, owner, ownerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Owners(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, owner, ownerDBTypes, true, ownerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ownerColumns, ownerPrimaryKeyColumns) {
		fields = ownerColumns
	} else {
		fields = strmangle.SetComplement(
			ownerColumns,
			ownerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(owner))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := OwnerSlice{owner}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testOwnersUpsert(t *testing.T) {
	t.Parallel()

	if len(ownerColumns) == len(ownerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	owner := Owner{}
	if err = randomize.Struct(seed, &owner, ownerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = owner.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Owner: %s", err)
	}

	count, err := Owners(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &owner, ownerDBTypes, false, ownerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Owner struct: %s", err)
	}

	if err = owner.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Owner: %s", err)
	}

	count, err = Owners(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
