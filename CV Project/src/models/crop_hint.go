// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v5"
)

// CropHint is an object representing the database table.
type CropHint struct {
	CropID             string      `boil:"crop_id" json:"crop_id" toml:"crop_id" yaml:"crop_id"`
	PageID             null.String `boil:"page_id" json:"page_id,omitempty" toml:"page_id" yaml:"page_id,omitempty"`
	Confidence         string      `boil:"confidence" json:"confidence" toml:"confidence" yaml:"confidence"`
	ImportanceFraction float64     `boil:"importance_fraction" json:"importance_fraction" toml:"importance_fraction" yaml:"importance_fraction"`
	Xcomin             float64     `boil:"xcomin" json:"xcomin" toml:"xcomin" yaml:"xcomin"`
	Xcomax             float64     `boil:"xcomax" json:"xcomax" toml:"xcomax" yaml:"xcomax"`
	Ycomin             float64     `boil:"ycomin" json:"ycomin" toml:"ycomin" yaml:"ycomin"`
	Ycomax             float64     `boil:"ycomax" json:"ycomax" toml:"ycomax" yaml:"ycomax"`

	R *cropHintR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cropHintL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// cropHintR is where relationships are stored.
type cropHintR struct {
	Page *Page
}

// cropHintL is where Load methods for each relationship are stored.
type cropHintL struct{}

var (
	cropHintColumns               = []string{"crop_id", "page_id", "confidence", "importance_fraction", "xcomin", "xcomax", "ycomin", "ycomax"}
	cropHintColumnsWithoutDefault = []string{"page_id", "confidence", "importance_fraction", "xcomin", "xcomax", "ycomin", "ycomax"}
	cropHintColumnsWithDefault    = []string{"crop_id"}
	cropHintPrimaryKeyColumns     = []string{"crop_id"}
)

type (
	// CropHintSlice is an alias for a slice of pointers to CropHint.
	// This should generally be used opposed to []CropHint.
	CropHintSlice []*CropHint
	// CropHintHook is the signature for custom CropHint hook methods
	CropHintHook func(boil.Executor, *CropHint) error

	cropHintQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cropHintType                 = reflect.TypeOf(&CropHint{})
	cropHintMapping              = queries.MakeStructMapping(cropHintType)
	cropHintPrimaryKeyMapping, _ = queries.BindMapping(cropHintType, cropHintMapping, cropHintPrimaryKeyColumns)
	cropHintInsertCacheMut       sync.RWMutex
	cropHintInsertCache          = make(map[string]insertCache)
	cropHintUpdateCacheMut       sync.RWMutex
	cropHintUpdateCache          = make(map[string]updateCache)
	cropHintUpsertCacheMut       sync.RWMutex
	cropHintUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var cropHintBeforeInsertHooks []CropHintHook
var cropHintBeforeUpdateHooks []CropHintHook
var cropHintBeforeDeleteHooks []CropHintHook
var cropHintBeforeUpsertHooks []CropHintHook

var cropHintAfterInsertHooks []CropHintHook
var cropHintAfterSelectHooks []CropHintHook
var cropHintAfterUpdateHooks []CropHintHook
var cropHintAfterDeleteHooks []CropHintHook
var cropHintAfterUpsertHooks []CropHintHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CropHint) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cropHintBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CropHint) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cropHintBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CropHint) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cropHintBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CropHint) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cropHintBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CropHint) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cropHintAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CropHint) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range cropHintAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CropHint) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range cropHintAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CropHint) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range cropHintAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CropHint) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range cropHintAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCropHintHook registers your hook function for all future operations.
func AddCropHintHook(hookPoint boil.HookPoint, cropHintHook CropHintHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cropHintBeforeInsertHooks = append(cropHintBeforeInsertHooks, cropHintHook)
	case boil.BeforeUpdateHook:
		cropHintBeforeUpdateHooks = append(cropHintBeforeUpdateHooks, cropHintHook)
	case boil.BeforeDeleteHook:
		cropHintBeforeDeleteHooks = append(cropHintBeforeDeleteHooks, cropHintHook)
	case boil.BeforeUpsertHook:
		cropHintBeforeUpsertHooks = append(cropHintBeforeUpsertHooks, cropHintHook)
	case boil.AfterInsertHook:
		cropHintAfterInsertHooks = append(cropHintAfterInsertHooks, cropHintHook)
	case boil.AfterSelectHook:
		cropHintAfterSelectHooks = append(cropHintAfterSelectHooks, cropHintHook)
	case boil.AfterUpdateHook:
		cropHintAfterUpdateHooks = append(cropHintAfterUpdateHooks, cropHintHook)
	case boil.AfterDeleteHook:
		cropHintAfterDeleteHooks = append(cropHintAfterDeleteHooks, cropHintHook)
	case boil.AfterUpsertHook:
		cropHintAfterUpsertHooks = append(cropHintAfterUpsertHooks, cropHintHook)
	}
}

// OneP returns a single cropHint record from the query, and panics on error.
func (q cropHintQuery) OneP() *CropHint {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single cropHint record from the query.
func (q cropHintQuery) One() (*CropHint, error) {
	o := &CropHint{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for crop_hint")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all CropHint records from the query, and panics on error.
func (q cropHintQuery) AllP() CropHintSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all CropHint records from the query.
func (q cropHintQuery) All() (CropHintSlice, error) {
	var o CropHintSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CropHint slice")
	}

	if len(cropHintAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all CropHint records in the query, and panics on error.
func (q cropHintQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all CropHint records in the query.
func (q cropHintQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count crop_hint rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q cropHintQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q cropHintQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if crop_hint exists")
	}

	return count > 0, nil
}

// PageG pointed to by the foreign key.
func (o *CropHint) PageG(mods ...qm.QueryMod) pageQuery {
	return o.Page(boil.GetDB(), mods...)
}

// Page pointed to by the foreign key.
func (o *CropHint) Page(exec boil.Executor, mods ...qm.QueryMod) pageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("page_id=?", o.PageID),
	}

	queryMods = append(queryMods, mods...)

	query := Pages(exec, queryMods...)
	queries.SetFrom(query.Query, "\"page\"")

	return query
}

// LoadPage allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (cropHintL) LoadPage(e boil.Executor, singular bool, maybeCropHint interface{}) error {
	var slice []*CropHint
	var object *CropHint

	count := 1
	if singular {
		object = maybeCropHint.(*CropHint)
	} else {
		slice = *maybeCropHint.(*CropHintSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &cropHintR{}
		}
		args[0] = object.PageID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &cropHintR{}
			}
			args[i] = obj.PageID
		}
	}

	query := fmt.Sprintf(
		"select * from \"page\" where \"page_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Page")
	}
	defer results.Close()

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Page")
	}

	if len(cropHintAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Page = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageID.String == foreign.PageID {
				local.R.Page = foreign
				break
			}
		}
	}

	return nil
}

// SetPageG of the crop_hint to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.CropHints.
// Uses the global database handle.
func (o *CropHint) SetPageG(insert bool, related *Page) error {
	return o.SetPage(boil.GetDB(), insert, related)
}

// SetPageP of the crop_hint to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.CropHints.
// Panics on error.
func (o *CropHint) SetPageP(exec boil.Executor, insert bool, related *Page) {
	if err := o.SetPage(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPageGP of the crop_hint to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.CropHints.
// Uses the global database handle and panics on error.
func (o *CropHint) SetPageGP(insert bool, related *Page) {
	if err := o.SetPage(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPage of the crop_hint to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.CropHints.
func (o *CropHint) SetPage(exec boil.Executor, insert bool, related *Page) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"crop_hint\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
		strmangle.WhereClause("\"", "\"", 2, cropHintPrimaryKeyColumns),
	)
	values := []interface{}{related.PageID, o.CropID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageID.String = related.PageID
	o.PageID.Valid = true

	if o.R == nil {
		o.R = &cropHintR{
			Page: related,
		}
	} else {
		o.R.Page = related
	}

	if related.R == nil {
		related.R = &pageR{
			CropHints: CropHintSlice{o},
		}
	} else {
		related.R.CropHints = append(related.R.CropHints, o)
	}

	return nil
}

// RemovePageG relationship.
// Sets o.R.Page to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *CropHint) RemovePageG(related *Page) error {
	return o.RemovePage(boil.GetDB(), related)
}

// RemovePageP relationship.
// Sets o.R.Page to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *CropHint) RemovePageP(exec boil.Executor, related *Page) {
	if err := o.RemovePage(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePageGP relationship.
// Sets o.R.Page to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *CropHint) RemovePageGP(related *Page) {
	if err := o.RemovePage(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePage relationship.
// Sets o.R.Page to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CropHint) RemovePage(exec boil.Executor, related *Page) error {
	var err error

	o.PageID.Valid = false
	if err = o.Update(exec, "page_id"); err != nil {
		o.PageID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Page = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CropHints {
		if o.PageID.String != ri.PageID.String {
			continue
		}

		ln := len(related.R.CropHints)
		if ln > 1 && i < ln-1 {
			related.R.CropHints[i] = related.R.CropHints[ln-1]
		}
		related.R.CropHints = related.R.CropHints[:ln-1]
		break
	}
	return nil
}

// CropHintsG retrieves all records.
func CropHintsG(mods ...qm.QueryMod) cropHintQuery {
	return CropHints(boil.GetDB(), mods...)
}

// CropHints retrieves all the records using an executor.
func CropHints(exec boil.Executor, mods ...qm.QueryMod) cropHintQuery {
	mods = append(mods, qm.From("\"crop_hint\""))
	return cropHintQuery{NewQuery(exec, mods...)}
}

// FindCropHintG retrieves a single record by ID.
func FindCropHintG(cropID string, selectCols ...string) (*CropHint, error) {
	return FindCropHint(boil.GetDB(), cropID, selectCols...)
}

// FindCropHintGP retrieves a single record by ID, and panics on error.
func FindCropHintGP(cropID string, selectCols ...string) *CropHint {
	retobj, err := FindCropHint(boil.GetDB(), cropID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCropHint retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCropHint(exec boil.Executor, cropID string, selectCols ...string) (*CropHint, error) {
	cropHintObj := &CropHint{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"crop_hint\" where \"crop_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, cropID)

	err := q.Bind(cropHintObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from crop_hint")
	}

	return cropHintObj, nil
}

// FindCropHintP retrieves a single record by ID with an executor, and panics on error.
func FindCropHintP(exec boil.Executor, cropID string, selectCols ...string) *CropHint {
	retobj, err := FindCropHint(exec, cropID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CropHint) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *CropHint) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *CropHint) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *CropHint) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no crop_hint provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cropHintColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	cropHintInsertCacheMut.RLock()
	cache, cached := cropHintInsertCache[key]
	cropHintInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			cropHintColumns,
			cropHintColumnsWithDefault,
			cropHintColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(cropHintType, cropHintMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cropHintType, cropHintMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"crop_hint\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"crop_hint\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into crop_hint")
	}

	if !cached {
		cropHintInsertCacheMut.Lock()
		cropHintInsertCache[key] = cache
		cropHintInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single CropHint record. See Update for
// whitelist behavior description.
func (o *CropHint) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single CropHint record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *CropHint) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the CropHint, and panics on error.
// See Update for whitelist behavior description.
func (o *CropHint) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the CropHint.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *CropHint) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	cropHintUpdateCacheMut.RLock()
	cache, cached := cropHintUpdateCache[key]
	cropHintUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(cropHintColumns, cropHintPrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update crop_hint, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"crop_hint\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cropHintPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cropHintType, cropHintMapping, append(wl, cropHintPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update crop_hint row")
	}

	if !cached {
		cropHintUpdateCacheMut.Lock()
		cropHintUpdateCache[key] = cache
		cropHintUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q cropHintQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q cropHintQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for crop_hint")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CropHintSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CropHintSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CropHintSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CropHintSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cropHintPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE \"crop_hint\" SET %s WHERE (\"crop_id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(cropHintPrimaryKeyColumns), len(colNames)+1, len(cropHintPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in cropHint slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CropHint) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *CropHint) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *CropHint) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *CropHint) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no crop_hint provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cropHintColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cropHintUpsertCacheMut.RLock()
	cache, cached := cropHintUpsertCache[key]
	cropHintUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			cropHintColumns,
			cropHintColumnsWithDefault,
			cropHintColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			cropHintColumns,
			cropHintPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert crop_hint, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cropHintPrimaryKeyColumns))
			copy(conflict, cropHintPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"crop_hint\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(cropHintType, cropHintMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cropHintType, cropHintMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert crop_hint")
	}

	if !cached {
		cropHintUpsertCacheMut.Lock()
		cropHintUpsertCache[key] = cache
		cropHintUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single CropHint record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CropHint) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single CropHint record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CropHint) DeleteG() error {
	if o == nil {
		return errors.New("models: no CropHint provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single CropHint record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CropHint) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single CropHint record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CropHint) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CropHint provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cropHintPrimaryKeyMapping)
	sql := "DELETE FROM \"crop_hint\" WHERE \"crop_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from crop_hint")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q cropHintQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q cropHintQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no cropHintQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from crop_hint")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CropHintSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o CropHintSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no CropHint slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CropHintSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CropHintSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CropHint slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(cropHintBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cropHintPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM \"crop_hint\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, cropHintPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(cropHintPrimaryKeyColumns), 1, len(cropHintPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from cropHint slice")
	}

	if len(cropHintAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *CropHint) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *CropHint) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CropHint) ReloadG() error {
	if o == nil {
		return errors.New("models: no CropHint provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CropHint) Reload(exec boil.Executor) error {
	ret, err := FindCropHint(exec, o.CropID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CropHintSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CropHintSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CropHintSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty CropHintSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CropHintSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	cropHints := CropHintSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cropHintPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT \"crop_hint\".* FROM \"crop_hint\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, cropHintPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(cropHintPrimaryKeyColumns), 1, len(cropHintPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&cropHints)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CropHintSlice")
	}

	*o = cropHints

	return nil
}

// CropHintExists checks if the CropHint row exists.
func CropHintExists(exec boil.Executor, cropID string) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from \"crop_hint\" where \"crop_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, cropID)
	}

	row := exec.QueryRow(sql, cropID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if crop_hint exists")
	}

	return exists, nil
}

// CropHintExistsG checks if the CropHint row exists.
func CropHintExistsG(cropID string) (bool, error) {
	return CropHintExists(boil.GetDB(), cropID)
}

// CropHintExistsGP checks if the CropHint row exists. Panics on error.
func CropHintExistsGP(cropID string) bool {
	e, err := CropHintExists(boil.GetDB(), cropID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CropHintExistsP checks if the CropHint row exists. Panics on error.
func CropHintExistsP(exec boil.Executor, cropID string) bool {
	e, err := CropHintExists(exec, cropID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
