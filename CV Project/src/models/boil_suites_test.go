// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Documents", testDocuments)
	t.Run("Owners", testOwners)
	t.Run("Pages", testPages)
	t.Run("TextAnnotations", testTextAnnotations)
	t.Run("LabelAnnotations", testLabelAnnotations)
	t.Run("CropHints", testCropHints)
	t.Run("Logs", testLogs)
}

func TestDelete(t *testing.T) {
	t.Run("Documents", testDocumentsDelete)
	t.Run("Owners", testOwnersDelete)
	t.Run("Pages", testPagesDelete)
	t.Run("TextAnnotations", testTextAnnotationsDelete)
	t.Run("LabelAnnotations", testLabelAnnotationsDelete)
	t.Run("CropHints", testCropHintsDelete)
	t.Run("Logs", testLogsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Documents", testDocumentsQueryDeleteAll)
	t.Run("Owners", testOwnersQueryDeleteAll)
	t.Run("Pages", testPagesQueryDeleteAll)
	t.Run("TextAnnotations", testTextAnnotationsQueryDeleteAll)
	t.Run("LabelAnnotations", testLabelAnnotationsQueryDeleteAll)
	t.Run("CropHints", testCropHintsQueryDeleteAll)
	t.Run("Logs", testLogsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Documents", testDocumentsSliceDeleteAll)
	t.Run("Owners", testOwnersSliceDeleteAll)
	t.Run("Pages", testPagesSliceDeleteAll)
	t.Run("TextAnnotations", testTextAnnotationsSliceDeleteAll)
	t.Run("LabelAnnotations", testLabelAnnotationsSliceDeleteAll)
	t.Run("CropHints", testCropHintsSliceDeleteAll)
	t.Run("Logs", testLogsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Documents", testDocumentsExists)
	t.Run("Owners", testOwnersExists)
	t.Run("Pages", testPagesExists)
	t.Run("TextAnnotations", testTextAnnotationsExists)
	t.Run("LabelAnnotations", testLabelAnnotationsExists)
	t.Run("CropHints", testCropHintsExists)
	t.Run("Logs", testLogsExists)
}

func TestFind(t *testing.T) {
	t.Run("Documents", testDocumentsFind)
	t.Run("Owners", testOwnersFind)
	t.Run("Pages", testPagesFind)
	t.Run("TextAnnotations", testTextAnnotationsFind)
	t.Run("LabelAnnotations", testLabelAnnotationsFind)
	t.Run("CropHints", testCropHintsFind)
	t.Run("Logs", testLogsFind)
}

func TestBind(t *testing.T) {
	t.Run("Documents", testDocumentsBind)
	t.Run("Owners", testOwnersBind)
	t.Run("Pages", testPagesBind)
	t.Run("TextAnnotations", testTextAnnotationsBind)
	t.Run("LabelAnnotations", testLabelAnnotationsBind)
	t.Run("CropHints", testCropHintsBind)
	t.Run("Logs", testLogsBind)
}

func TestOne(t *testing.T) {
	t.Run("Documents", testDocumentsOne)
	t.Run("Owners", testOwnersOne)
	t.Run("Pages", testPagesOne)
	t.Run("TextAnnotations", testTextAnnotationsOne)
	t.Run("LabelAnnotations", testLabelAnnotationsOne)
	t.Run("CropHints", testCropHintsOne)
	t.Run("Logs", testLogsOne)
}

func TestAll(t *testing.T) {
	t.Run("Documents", testDocumentsAll)
	t.Run("Owners", testOwnersAll)
	t.Run("Pages", testPagesAll)
	t.Run("TextAnnotations", testTextAnnotationsAll)
	t.Run("LabelAnnotations", testLabelAnnotationsAll)
	t.Run("CropHints", testCropHintsAll)
	t.Run("Logs", testLogsAll)
}

func TestCount(t *testing.T) {
	t.Run("Documents", testDocumentsCount)
	t.Run("Owners", testOwnersCount)
	t.Run("Pages", testPagesCount)
	t.Run("TextAnnotations", testTextAnnotationsCount)
	t.Run("LabelAnnotations", testLabelAnnotationsCount)
	t.Run("CropHints", testCropHintsCount)
	t.Run("Logs", testLogsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Documents", testDocumentsHooks)
	t.Run("Owners", testOwnersHooks)
	t.Run("Pages", testPagesHooks)
	t.Run("TextAnnotations", testTextAnnotationsHooks)
	t.Run("LabelAnnotations", testLabelAnnotationsHooks)
	t.Run("CropHints", testCropHintsHooks)
	t.Run("Logs", testLogsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Documents", testDocumentsInsert)
	t.Run("Documents", testDocumentsInsertWhitelist)
	t.Run("Owners", testOwnersInsert)
	t.Run("Owners", testOwnersInsertWhitelist)
	t.Run("Pages", testPagesInsert)
	t.Run("Pages", testPagesInsertWhitelist)
	t.Run("TextAnnotations", testTextAnnotationsInsert)
	t.Run("TextAnnotations", testTextAnnotationsInsertWhitelist)
	t.Run("LabelAnnotations", testLabelAnnotationsInsert)
	t.Run("LabelAnnotations", testLabelAnnotationsInsertWhitelist)
	t.Run("CropHints", testCropHintsInsert)
	t.Run("CropHints", testCropHintsInsertWhitelist)
	t.Run("Logs", testLogsInsert)
	t.Run("Logs", testLogsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DocumentToOwnerUsingOwner", testDocumentToOneOwnerUsingOwner)
	t.Run("PageToDocumentUsingDocument", testPageToOneDocumentUsingDocument)
	t.Run("TextAnnotationToPageUsingPage", testTextAnnotationToOnePageUsingPage)
	t.Run("LabelAnnotationToPageUsingPage", testLabelAnnotationToOnePageUsingPage)
	t.Run("CropHintToPageUsingPage", testCropHintToOnePageUsingPage)
	t.Run("LogToPageUsingPage", testLogToOnePageUsingPage)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DocumentToPages", testDocumentToManyPages)
	t.Run("OwnerToDocuments", testOwnerToManyDocuments)
	t.Run("PageToTextAnnotations", testPageToManyTextAnnotations)
	t.Run("PageToLabelAnnotations", testPageToManyLabelAnnotations)
	t.Run("PageToCropHints", testPageToManyCropHints)
	t.Run("PageToLogs", testPageToManyLogs)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DocumentToOwnerUsingOwner", testDocumentToOneSetOpOwnerUsingOwner)
	t.Run("PageToDocumentUsingDocument", testPageToOneSetOpDocumentUsingDocument)
	t.Run("TextAnnotationToPageUsingPage", testTextAnnotationToOneSetOpPageUsingPage)
	t.Run("LabelAnnotationToPageUsingPage", testLabelAnnotationToOneSetOpPageUsingPage)
	t.Run("CropHintToPageUsingPage", testCropHintToOneSetOpPageUsingPage)
	t.Run("LogToPageUsingPage", testLogToOneSetOpPageUsingPage)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("DocumentToOwnerUsingOwner", testDocumentToOneRemoveOpOwnerUsingOwner)
	t.Run("PageToDocumentUsingDocument", testPageToOneRemoveOpDocumentUsingDocument)
	t.Run("TextAnnotationToPageUsingPage", testTextAnnotationToOneRemoveOpPageUsingPage)
	t.Run("LabelAnnotationToPageUsingPage", testLabelAnnotationToOneRemoveOpPageUsingPage)
	t.Run("CropHintToPageUsingPage", testCropHintToOneRemoveOpPageUsingPage)
	t.Run("LogToPageUsingPage", testLogToOneRemoveOpPageUsingPage)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DocumentToPages", testDocumentToManyAddOpPages)
	t.Run("OwnerToDocuments", testOwnerToManyAddOpDocuments)
	t.Run("PageToTextAnnotations", testPageToManyAddOpTextAnnotations)
	t.Run("PageToLabelAnnotations", testPageToManyAddOpLabelAnnotations)
	t.Run("PageToCropHints", testPageToManyAddOpCropHints)
	t.Run("PageToLogs", testPageToManyAddOpLogs)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("DocumentToPages", testDocumentToManySetOpPages)
	t.Run("OwnerToDocuments", testOwnerToManySetOpDocuments)
	t.Run("PageToTextAnnotations", testPageToManySetOpTextAnnotations)
	t.Run("PageToLabelAnnotations", testPageToManySetOpLabelAnnotations)
	t.Run("PageToCropHints", testPageToManySetOpCropHints)
	t.Run("PageToLogs", testPageToManySetOpLogs)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("DocumentToPages", testDocumentToManyRemoveOpPages)
	t.Run("OwnerToDocuments", testOwnerToManyRemoveOpDocuments)
	t.Run("PageToTextAnnotations", testPageToManyRemoveOpTextAnnotations)
	t.Run("PageToLabelAnnotations", testPageToManyRemoveOpLabelAnnotations)
	t.Run("PageToCropHints", testPageToManyRemoveOpCropHints)
	t.Run("PageToLogs", testPageToManyRemoveOpLogs)
}

func TestReload(t *testing.T) {
	t.Run("Documents", testDocumentsReload)
	t.Run("Owners", testOwnersReload)
	t.Run("Pages", testPagesReload)
	t.Run("TextAnnotations", testTextAnnotationsReload)
	t.Run("LabelAnnotations", testLabelAnnotationsReload)
	t.Run("CropHints", testCropHintsReload)
	t.Run("Logs", testLogsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Documents", testDocumentsReloadAll)
	t.Run("Owners", testOwnersReloadAll)
	t.Run("Pages", testPagesReloadAll)
	t.Run("TextAnnotations", testTextAnnotationsReloadAll)
	t.Run("LabelAnnotations", testLabelAnnotationsReloadAll)
	t.Run("CropHints", testCropHintsReloadAll)
	t.Run("Logs", testLogsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Documents", testDocumentsSelect)
	t.Run("Owners", testOwnersSelect)
	t.Run("Pages", testPagesSelect)
	t.Run("TextAnnotations", testTextAnnotationsSelect)
	t.Run("LabelAnnotations", testLabelAnnotationsSelect)
	t.Run("CropHints", testCropHintsSelect)
	t.Run("Logs", testLogsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Documents", testDocumentsUpdate)
	t.Run("Owners", testOwnersUpdate)
	t.Run("Pages", testPagesUpdate)
	t.Run("TextAnnotations", testTextAnnotationsUpdate)
	t.Run("LabelAnnotations", testLabelAnnotationsUpdate)
	t.Run("CropHints", testCropHintsUpdate)
	t.Run("Logs", testLogsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Documents", testDocumentsSliceUpdateAll)
	t.Run("Owners", testOwnersSliceUpdateAll)
	t.Run("Pages", testPagesSliceUpdateAll)
	t.Run("TextAnnotations", testTextAnnotationsSliceUpdateAll)
	t.Run("LabelAnnotations", testLabelAnnotationsSliceUpdateAll)
	t.Run("CropHints", testCropHintsSliceUpdateAll)
	t.Run("Logs", testLogsSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Documents", testDocumentsUpsert)
	t.Run("Owners", testOwnersUpsert)
	t.Run("Pages", testPagesUpsert)
	t.Run("TextAnnotations", testTextAnnotationsUpsert)
	t.Run("LabelAnnotations", testLabelAnnotationsUpsert)
	t.Run("CropHints", testCropHintsUpsert)
	t.Run("Logs", testLogsUpsert)
}
