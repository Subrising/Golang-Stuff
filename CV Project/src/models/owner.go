// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// Owner is an object representing the database table.
type Owner struct {
	OwnerID   string `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	OwnerName string `boil:"owner_name" json:"owner_name" toml:"owner_name" yaml:"owner_name"`

	R *ownerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ownerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// ownerR is where relationships are stored.
type ownerR struct {
	Documents DocumentSlice
}

// ownerL is where Load methods for each relationship are stored.
type ownerL struct{}

var (
	ownerColumns               = []string{"owner_id", "owner_name"}
	ownerColumnsWithoutDefault = []string{"owner_name"}
	ownerColumnsWithDefault    = []string{"owner_id"}
	ownerPrimaryKeyColumns     = []string{"owner_id"}
)

type (
	// OwnerSlice is an alias for a slice of pointers to Owner.
	// This should generally be used opposed to []Owner.
	OwnerSlice []*Owner
	// OwnerHook is the signature for custom Owner hook methods
	OwnerHook func(boil.Executor, *Owner) error

	ownerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ownerType                 = reflect.TypeOf(&Owner{})
	ownerMapping              = queries.MakeStructMapping(ownerType)
	ownerPrimaryKeyMapping, _ = queries.BindMapping(ownerType, ownerMapping, ownerPrimaryKeyColumns)
	ownerInsertCacheMut       sync.RWMutex
	ownerInsertCache          = make(map[string]insertCache)
	ownerUpdateCacheMut       sync.RWMutex
	ownerUpdateCache          = make(map[string]updateCache)
	ownerUpsertCacheMut       sync.RWMutex
	ownerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var ownerBeforeInsertHooks []OwnerHook
var ownerBeforeUpdateHooks []OwnerHook
var ownerBeforeDeleteHooks []OwnerHook
var ownerBeforeUpsertHooks []OwnerHook

var ownerAfterInsertHooks []OwnerHook
var ownerAfterSelectHooks []OwnerHook
var ownerAfterUpdateHooks []OwnerHook
var ownerAfterDeleteHooks []OwnerHook
var ownerAfterUpsertHooks []OwnerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Owner) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ownerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Owner) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ownerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Owner) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ownerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Owner) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ownerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Owner) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ownerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Owner) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range ownerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Owner) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ownerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Owner) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ownerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Owner) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ownerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOwnerHook registers your hook function for all future operations.
func AddOwnerHook(hookPoint boil.HookPoint, ownerHook OwnerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ownerBeforeInsertHooks = append(ownerBeforeInsertHooks, ownerHook)
	case boil.BeforeUpdateHook:
		ownerBeforeUpdateHooks = append(ownerBeforeUpdateHooks, ownerHook)
	case boil.BeforeDeleteHook:
		ownerBeforeDeleteHooks = append(ownerBeforeDeleteHooks, ownerHook)
	case boil.BeforeUpsertHook:
		ownerBeforeUpsertHooks = append(ownerBeforeUpsertHooks, ownerHook)
	case boil.AfterInsertHook:
		ownerAfterInsertHooks = append(ownerAfterInsertHooks, ownerHook)
	case boil.AfterSelectHook:
		ownerAfterSelectHooks = append(ownerAfterSelectHooks, ownerHook)
	case boil.AfterUpdateHook:
		ownerAfterUpdateHooks = append(ownerAfterUpdateHooks, ownerHook)
	case boil.AfterDeleteHook:
		ownerAfterDeleteHooks = append(ownerAfterDeleteHooks, ownerHook)
	case boil.AfterUpsertHook:
		ownerAfterUpsertHooks = append(ownerAfterUpsertHooks, ownerHook)
	}
}

// OneP returns a single owner record from the query, and panics on error.
func (q ownerQuery) OneP() *Owner {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single owner record from the query.
func (q ownerQuery) One() (*Owner, error) {
	o := &Owner{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for owner")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Owner records from the query, and panics on error.
func (q ownerQuery) AllP() OwnerSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Owner records from the query.
func (q ownerQuery) All() (OwnerSlice, error) {
	var o OwnerSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Owner slice")
	}

	if len(ownerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Owner records in the query, and panics on error.
func (q ownerQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Owner records in the query.
func (q ownerQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count owner rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q ownerQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q ownerQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if owner exists")
	}

	return count > 0, nil
}

// DocumentsG retrieves all the document's document.
func (o *Owner) DocumentsG(mods ...qm.QueryMod) documentQuery {
	return o.Documents(boil.GetDB(), mods...)
}

// Documents retrieves all the document's document with an executor.
func (o *Owner) Documents(exec boil.Executor, mods ...qm.QueryMod) documentQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"owner_id\"=?", o.OwnerID),
	)

	query := Documents(exec, queryMods...)
	queries.SetFrom(query.Query, "\"document\" as \"a\"")
	return query
}

// LoadDocuments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (ownerL) LoadDocuments(e boil.Executor, singular bool, maybeOwner interface{}) error {
	var slice []*Owner
	var object *Owner

	count := 1
	if singular {
		object = maybeOwner.(*Owner)
	} else {
		slice = *maybeOwner.(*OwnerSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &ownerR{}
		}
		args[0] = object.OwnerID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &ownerR{}
			}
			args[i] = obj.OwnerID
		}
	}

	query := fmt.Sprintf(
		"select * from \"document\" where \"owner_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load document")
	}
	defer results.Close()

	var resultSlice []*Document
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice document")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Documents = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.OwnerID == foreign.OwnerID.String {
				local.R.Documents = append(local.R.Documents, foreign)
				break
			}
		}
	}

	return nil
}

// AddDocumentsG adds the given related objects to the existing relationships
// of the owner, optionally inserting them as new records.
// Appends related to o.R.Documents.
// Sets related.R.Owner appropriately.
// Uses the global database handle.
func (o *Owner) AddDocumentsG(insert bool, related ...*Document) error {
	return o.AddDocuments(boil.GetDB(), insert, related...)
}

// AddDocumentsP adds the given related objects to the existing relationships
// of the owner, optionally inserting them as new records.
// Appends related to o.R.Documents.
// Sets related.R.Owner appropriately.
// Panics on error.
func (o *Owner) AddDocumentsP(exec boil.Executor, insert bool, related ...*Document) {
	if err := o.AddDocuments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddDocumentsGP adds the given related objects to the existing relationships
// of the owner, optionally inserting them as new records.
// Appends related to o.R.Documents.
// Sets related.R.Owner appropriately.
// Uses the global database handle and panics on error.
func (o *Owner) AddDocumentsGP(insert bool, related ...*Document) {
	if err := o.AddDocuments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddDocuments adds the given related objects to the existing relationships
// of the owner, optionally inserting them as new records.
// Appends related to o.R.Documents.
// Sets related.R.Owner appropriately.
func (o *Owner) AddDocuments(exec boil.Executor, insert bool, related ...*Document) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OwnerID.String = o.OwnerID
			rel.OwnerID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"document\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
				strmangle.WhereClause("\"", "\"", 2, documentPrimaryKeyColumns),
			)
			values := []interface{}{o.OwnerID, rel.DocumentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OwnerID.String = o.OwnerID
			rel.OwnerID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &ownerR{
			Documents: related,
		}
	} else {
		o.R.Documents = append(o.R.Documents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &documentR{
				Owner: o,
			}
		} else {
			rel.R.Owner = o
		}
	}
	return nil
}

// SetDocumentsG removes all previously related items of the
// owner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Owner's Documents accordingly.
// Replaces o.R.Documents with related.
// Sets related.R.Owner's Documents accordingly.
// Uses the global database handle.
func (o *Owner) SetDocumentsG(insert bool, related ...*Document) error {
	return o.SetDocuments(boil.GetDB(), insert, related...)
}

// SetDocumentsP removes all previously related items of the
// owner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Owner's Documents accordingly.
// Replaces o.R.Documents with related.
// Sets related.R.Owner's Documents accordingly.
// Panics on error.
func (o *Owner) SetDocumentsP(exec boil.Executor, insert bool, related ...*Document) {
	if err := o.SetDocuments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDocumentsGP removes all previously related items of the
// owner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Owner's Documents accordingly.
// Replaces o.R.Documents with related.
// Sets related.R.Owner's Documents accordingly.
// Uses the global database handle and panics on error.
func (o *Owner) SetDocumentsGP(insert bool, related ...*Document) {
	if err := o.SetDocuments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDocuments removes all previously related items of the
// owner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Owner's Documents accordingly.
// Replaces o.R.Documents with related.
// Sets related.R.Owner's Documents accordingly.
func (o *Owner) SetDocuments(exec boil.Executor, insert bool, related ...*Document) error {
	query := "update \"document\" set \"owner_id\" = null where \"owner_id\" = $1"
	values := []interface{}{o.OwnerID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Documents {
			rel.OwnerID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Owner = nil
		}

		o.R.Documents = nil
	}
	return o.AddDocuments(exec, insert, related...)
}

// RemoveDocumentsG relationships from objects passed in.
// Removes related items from R.Documents (uses pointer comparison, removal does not keep order)
// Sets related.R.Owner.
// Uses the global database handle.
func (o *Owner) RemoveDocumentsG(related ...*Document) error {
	return o.RemoveDocuments(boil.GetDB(), related...)
}

// RemoveDocumentsP relationships from objects passed in.
// Removes related items from R.Documents (uses pointer comparison, removal does not keep order)
// Sets related.R.Owner.
// Panics on error.
func (o *Owner) RemoveDocumentsP(exec boil.Executor, related ...*Document) {
	if err := o.RemoveDocuments(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveDocumentsGP relationships from objects passed in.
// Removes related items from R.Documents (uses pointer comparison, removal does not keep order)
// Sets related.R.Owner.
// Uses the global database handle and panics on error.
func (o *Owner) RemoveDocumentsGP(related ...*Document) {
	if err := o.RemoveDocuments(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveDocuments relationships from objects passed in.
// Removes related items from R.Documents (uses pointer comparison, removal does not keep order)
// Sets related.R.Owner.
func (o *Owner) RemoveDocuments(exec boil.Executor, related ...*Document) error {
	var err error
	for _, rel := range related {
		rel.OwnerID.Valid = false
		if rel.R != nil {
			rel.R.Owner = nil
		}
		if err = rel.Update(exec, "owner_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Documents {
			if rel != ri {
				continue
			}

			ln := len(o.R.Documents)
			if ln > 1 && i < ln-1 {
				o.R.Documents[i] = o.R.Documents[ln-1]
			}
			o.R.Documents = o.R.Documents[:ln-1]
			break
		}
	}

	return nil
}

// OwnersG retrieves all records.
func OwnersG(mods ...qm.QueryMod) ownerQuery {
	return Owners(boil.GetDB(), mods...)
}

// Owners retrieves all the records using an executor.
func Owners(exec boil.Executor, mods ...qm.QueryMod) ownerQuery {
	mods = append(mods, qm.From("\"owner\""))
	return ownerQuery{NewQuery(exec, mods...)}
}

// FindOwnerG retrieves a single record by ID.
func FindOwnerG(ownerID string, selectCols ...string) (*Owner, error) {
	return FindOwner(boil.GetDB(), ownerID, selectCols...)
}

// FindOwnerGP retrieves a single record by ID, and panics on error.
func FindOwnerGP(ownerID string, selectCols ...string) *Owner {
	retobj, err := FindOwner(boil.GetDB(), ownerID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindOwner retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOwner(exec boil.Executor, ownerID string, selectCols ...string) (*Owner, error) {
	ownerObj := &Owner{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"owner\" where \"owner_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, ownerID)

	err := q.Bind(ownerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from owner")
	}

	return ownerObj, nil
}

// FindOwnerP retrieves a single record by ID with an executor, and panics on error.
func FindOwnerP(exec boil.Executor, ownerID string, selectCols ...string) *Owner {
	retobj, err := FindOwner(exec, ownerID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Owner) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Owner) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Owner) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Owner) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no owner provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ownerColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	ownerInsertCacheMut.RLock()
	cache, cached := ownerInsertCache[key]
	ownerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			ownerColumns,
			ownerColumnsWithDefault,
			ownerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(ownerType, ownerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ownerType, ownerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"owner\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"owner\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into owner")
	}

	if !cached {
		ownerInsertCacheMut.Lock()
		ownerInsertCache[key] = cache
		ownerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Owner record. See Update for
// whitelist behavior description.
func (o *Owner) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Owner record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Owner) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Owner, and panics on error.
// See Update for whitelist behavior description.
func (o *Owner) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Owner.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Owner) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	ownerUpdateCacheMut.RLock()
	cache, cached := ownerUpdateCache[key]
	ownerUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(ownerColumns, ownerPrimaryKeyColumns, whitelist)
		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update owner, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"owner\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ownerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ownerType, ownerMapping, append(wl, ownerPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update owner row")
	}

	if !cached {
		ownerUpdateCacheMut.Lock()
		ownerUpdateCache[key] = cache
		ownerUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q ownerQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q ownerQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for owner")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OwnerSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o OwnerSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o OwnerSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OwnerSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ownerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"UPDATE \"owner\" SET %s WHERE (\"owner_id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(ownerPrimaryKeyColumns), len(colNames)+1, len(ownerPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in owner slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Owner) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Owner) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Owner) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Owner) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no owner provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ownerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ownerUpsertCacheMut.RLock()
	cache, cached := ownerUpsertCache[key]
	ownerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			ownerColumns,
			ownerColumnsWithDefault,
			ownerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			ownerColumns,
			ownerPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert owner, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ownerPrimaryKeyColumns))
			copy(conflict, ownerPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"owner\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(ownerType, ownerMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ownerType, ownerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert owner")
	}

	if !cached {
		ownerUpsertCacheMut.Lock()
		ownerUpsertCache[key] = cache
		ownerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Owner record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Owner) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Owner record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Owner) DeleteG() error {
	if o == nil {
		return errors.New("models: no Owner provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Owner record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Owner) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Owner record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Owner) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Owner provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ownerPrimaryKeyMapping)
	sql := "DELETE FROM \"owner\" WHERE \"owner_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from owner")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q ownerQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q ownerQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no ownerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from owner")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o OwnerSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o OwnerSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Owner slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o OwnerSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OwnerSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Owner slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(ownerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ownerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"DELETE FROM \"owner\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ownerPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(ownerPrimaryKeyColumns), 1, len(ownerPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from owner slice")
	}

	if len(ownerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Owner) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Owner) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Owner) ReloadG() error {
	if o == nil {
		return errors.New("models: no Owner provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Owner) Reload(exec boil.Executor) error {
	ret, err := FindOwner(exec, o.OwnerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OwnerSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *OwnerSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OwnerSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty OwnerSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OwnerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	owners := OwnerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ownerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf(
		"SELECT \"owner\".* FROM \"owner\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ownerPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(ownerPrimaryKeyColumns), 1, len(ownerPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&owners)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OwnerSlice")
	}

	*o = owners

	return nil
}

// OwnerExists checks if the Owner row exists.
func OwnerExists(exec boil.Executor, ownerID string) (bool, error) {
	var exists bool

	sql := "select exists(select 1 from \"owner\" where \"owner_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, ownerID)
	}

	row := exec.QueryRow(sql, ownerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if owner exists")
	}

	return exists, nil
}

// OwnerExistsG checks if the Owner row exists.
func OwnerExistsG(ownerID string) (bool, error) {
	return OwnerExists(boil.GetDB(), ownerID)
}

// OwnerExistsGP checks if the Owner row exists. Panics on error.
func OwnerExistsGP(ownerID string) bool {
	e, err := OwnerExists(boil.GetDB(), ownerID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// OwnerExistsP checks if the Owner row exists. Panics on error.
func OwnerExistsP(exec boil.Executor, ownerID string) bool {
	e, err := OwnerExists(exec, ownerID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
